!モバイル最適化のための実用ガイド - レンダリング最適化 / Practical Guide to Optimization for Mobiles - Rendering Optimizations

本項ではレンダリング最適化の技術的な要素を紹介します。パフォーマンスを向上せるためにライティングの結果を焼き込む方法とShadowgun開発陣が高解像度のテクスチャへのライティング焼き込みを活用してゲームの見栄えを美麗なものにしたか紹介します。もし最適化されたモバイルゲームがどのような見栄えとなるかか一般的な情報を探しちいるのであれば [[Main.iphone-OptimizedGraphicsMethods | グラフィックス手法のページ]] を参照下さい。

!! 美麗なゲームにする

レンダリング最適化はしばしば泥臭い作業が必要になります。Unityが提供する仕組みにより速く動作させることは簡単ですが、限られたハードウェアで最強のスピードを必要な場合、パフォーマンスの鍵となる変更を導入出来る前提であれば、カスタムで作業を行い、Unityの仕組みを迂回すべきです。エディタ スクリプト、簡単なシェーダー、および古き良き画像制作です。

__Unity フリー版 ユーザ向けの注意:__ ここで参照されているエディタ スクリプトは RenderTexture を使用して本番環境でスムーズになるようにしているため、フリー版では動作しません。一方で背後の原理および付随しているスクリーンショットは十分活用出来るのでこれらのテクニックを使ってテクスチャ焼き込みを行うことは問題ありません。

!!! 裏の裏まで知る

まず最初に [[Main.Shaders | シェーダの書き方の紹介]] を参照下さい。

* [[http://unity3d.com/support/resources/assets/built-in-shaders | ビルトイン シェーダ]] 
** ビルトイン シェーダのソースコードを眺めて下さい。何か別のことを行うシェーダを作成したい場合、すでに存在する二つのシェーダを組み合わせて実現出来ることがしばしばあります。

* サーフェイス シェーダ デバッグ (#pragma debug)
** 全てのサーフェイス シェーダからCG シェーダが生成され、そこで完全にコンパイルされます。``#pragma debug``  をサーフェイス シェーダの冒頭に加えると、コンパイルされたシェーダをインスペクタで開いたとき中間CGコードをみることが出来ます。これはシェーダの特定の箇所が実際にどういう計算をしているか知るのに便利であり、さらにサーフェイス シェーダ から切り出してCGシェーダに適用するのにも便利です。

* シェーダのIncludeファイル
** それぞれのシェーダには多くのシェーダ ヘルパー関数 コードがIncludeされていて普段は使用されませんが、しばしばどこにも定義されてないように見えるWorldReflectionVector をシェーダがコールしているのはここにあるためです。Unityにはいくつかの [[SL-BuiltinIncludes | ビルトイン シェーダの include ファイル]] がありわこれらのヘルパー関数の定義を行っています。特定の関数を見つけるには全てのincludeファイルを検索する必要があります。

** これらのファイルはUnityが使用する仕組みの主要な部分でありシェーダを記述することを容易にします。これらのファイルはリアルタイムシャドウ、異なるライトの種類、ライトマップ、および複数プラットフォーム対応の機能を提供します。


* ハードウェアに関するドキュメント
**時間をかけて次のAppleドキュメントを読み込んで下さい。 
[[http://developer.apple.com/library/ios/#documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/OpenGLESPlatforms/OpenGLESPlatforms.html%23//apple_ref/doc/uid/TP40008793-CH106-SW6 | ハードウェア]] および [[http://developer.apple.com/library/ios/#documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/BestPracticesforShaders/BestPracticesforShaders.html | シェーダを書くベストプラクティス]] 。ただし、留意してほしいこととして浮動小数点精度のヒントについてはより積極的にすることを推奨します。



!! [[http://blogs.unity3d.com/2012/03/23/shadowgun-optimizing-for-mobile-sample-level/ | Shadowgun]] での詳細

実行されているハードウェアを考えるとShadowgunのグラフィックスは素晴らしいものです。品質が鍵に見える一方でそのような品質を達成するためにプログラマがアーティストの潜在能力を最大限に引き出すために出来るテクニックがいくつかあります。
 [[Main.iphone-OptimizedGraphicsMethods | グラフィックス手法のページ]] の中でShadowgunの黄金の像を素晴らしい最適化の事例として挙げました。法線マップを使用する代わりに像の定義を固定で決定して、ライティングの詳細をテクスチャに焼き込みました。ここでは、ゲームの中でどのようにしてなぜ同じテクニックを使用すべきかを紹介します。

(:showhide name="黄金の像を、 リアルタイム 対 焼き込み のシェーダをコード比較":)
(:table border=0:)
(:cellnr:)
(:code:)
// staticにライトマップされた物体の法線マッピング
//  された鏡面ハイライトのピクセルシェーダのコード

// テクスチャ読み込み 5回、多くの命令

SurfaceOutput o;

fixed4 tex = tex2D(_MainTex, IN.uv_MainTex);
fixed4 c = tex * _Color;
o.Albedo = c.rgb;
	
o.Gloss = tex.a;
o.Specular = _Shininess;
	
o.Normal = UnpackNormal(tex2D(_BumpMap, IN.uv_BumpMap));
	
float3 worldRefl = WorldReflectionVector (IN, o.Normal);
fixed4 reflcol = texCUBE (_Cube, worldRefl);
reflcol *= tex.a;
o.Emission = reflcol.rgb * _ReflectColor.rgb;
o.Alpha = reflcol.a * _ReflectColor.a;

fixed atten = LIGHT_ATTENUATION(IN);
fixed4 c = 0;

half3 specColor;
fixed4 lmtex = tex2D(unity_Lightmap, IN.lmap.xy);
fixed4 lmIndTex = tex2D(unity_LightmapInd, IN.lmap.xy);
  
const float3x3 unity_DirBasis = float3x3( 
float3( 0.81649658,  0.0, 0.57735028),
float3(-0.40824830,  0.70710679, 0.57735027),
float3(-0.40824829, -0.70710678, 0.57735026) );
	
half3 lm = DecodeLightmap (lmtex);

half3 scalePerBasisVector = DecodeLightmap (lmIndTex);

half3 normalInRnmBasis = saturate (mul (unity_DirBasis, o.Normal));
lm *= dot (normalInRnmBasis, scalePerBasisVector);

return half4(lm, 1);
(:codeend:)
(:cell:)
(:code:)
// テクスチャに焼き込みされたライティングの
//  ピクセルシェーダのコード

// テクスチャ読み込み 2 回、極めて少ない命令

fixed4 c = tex2D (_MainTex, i.uv.xy);	
			
c.xyz += texCUBE(_EnvTex,i.refl) * _ReflectionColor * c.a;
			
return c;
(:codeend:)
(:tableend:)
(:showhideend:)

(:table border=0:)
(:cellnr:)

Attach:bumpStatue.gif\\
Reflective Bumped Specular\\
Attach:statuetex2.jpg
  
(:cellnr:)
  
Attach:bakedStatue.gif\\
Baked Light with Reflection\\
Attach:statuetex1.jpg

(:tableend:)

!!! テクセルへのレンダリング

リアルタイムライトは間違いなく品質が上がりますが、焼き込みによるパフォーマンスの改善は著しいものです。ではどうやってこれを達成したのか？ [[http://u3d.as/content/forest-johnson/render-to-texel-baker/3fD | Render to Texel]] と呼ばれるエディタ ツールがこの目的で作成されました。テクスチャへのライトの焼き込みを次のプロセスで行っています:

* 接空間法線マップをスクリプト経由でワールド座標に変換。

* ワールド座標の位地マップをスクリプト経由で作成

* テクスチャに前述のふたつのマップを使用してテクスチャ全体をフルスクリーン パスを、ライトごとにひとつの追加のパスつきでレンダリング

* いくつかの見晴らしの良い点から平均的な結果が得られるように、全体的に満足な仕上がりにするか、せめてゲームで最も良く使われるビューアングルで良い仕上がりにする。

これがベストのグラフィックス最適化を行う方法です。大量の計算を飛ばすためにあらかじめエディタまたはゲームの実行前に行っておきます。一般的には行うべきことは次の通りです:

%Attach:statueBake.jpg

* パフォーマンスは気にせず見栄えが最高のものを作成

* [[Main.Lightmapping | Unityのライトマップツール]] および [[http://u3d.as/content/forest-johnson/render-to-texel-baker/3fD | Render to Texel]] というようなエディタ拡張、および [[http://u3d.as/content/forest-johnson/sprite-packer-with-legacy-particle-emitter-to-shuriken-converter-/34E | スプライト パッカー]] などを使用して容易にレンダリング出来るものに焼き込みます。
** カスタムでツールを自作するのがベストであり、ゲームで発生しているどんな問題にとっても完璧なツールを作成出来ます。

* 焼き込みした結果に "輝き" かわ足されるように調整してシェーダおよびスクリプトを作成します。動的ライトに見せかける見栄えの良いエフェクトです。

!!! ライトの周波数という概念

Attach:imageFrequency.jpg

オーディオ トラックのバスやトレブルと同じように画像にも高周波と低周波の要素があり、レンダリングするときはそれらを、ステレオがサブウーハーやツィーターを使用して音全体を構築するように、個別にハンドリングするのがベストです。画像の異なる周波数を視覚化するひとつの方法は Photoshopの "High Pass" フィルタを使用することです。メニューから^^Filters->Other->High Pass^ です。もしオーディオ業務を経験したことがあれば、ハイパスは聞いたことがあるはずです。要は、Xというバラメータを渡してあげるとそれより低い周波数を全てカットする働きをします。画像についてはガウス ブラーがろーパスに相当するものです。

これはリアルタイム グラフィックスに適用出来るのは、周波数により分類を行って何をハンドリングするか判断しやすいためです。例えば、基本的なライトマップ環境では最終画像は合成として、ライトマップから低周波を、テクスチャから高周波を取得します。Shadowgunでは低周波のライトはライトプローブを使用して速やかに適用出来て、高周波のライトは、簡単なバンプマップのシェーダを任意のライト方向つきで使用することで擬似的に再現します。

一般的には、異なる手法により異なる周波数のライトをレンダリングすることで、例えば 焼き込み 対 動的 、オブジェクト単位 対 レベル単位、ピクセル単位 対 頂点単位、等々の手法により制限のあるハードウェアで完全に再現される画像を作成出来ます。好みによる選択は置いといて、強いバリエーションのカラーまたは値を高周波と低周波ともにもたせるのは良い考えです。

!!! 周波数活用の実例: Shadowgunの分解

Attach:shadowgunComposite.jpg

* 最上行
** 超低周波 鏡面 頂点ライティング| 高周波 アルファ チャネル | 低周波 ライトマップ | 高周波 アルベド

* 中間行
** 鏡面 頂点ライティング * アルファ | 高周波の追加の詳細 | ライトマップ * カラーチャネル

* 最下行
** 最終的な合計

__注意__: 通常はこの分解はディファード レンダラのステップに該当しますが、今回の場合は該当しません。全てがひとつのパスで行われます。合成が行われたもとのシェーダを次に示します:


(:showhide name="グロス風の頂点追加ライティング":)
(:code:)
Shader "MADFINGER/Environment/Virtual Gloss Per-Vertex Additive (Supports Lightmap)" {
Properties {
	_MainTex ("Base (RGB) Gloss (A)", 2D) = "white" {}
	//_MainTexMipBias ("Base Sharpness", Range (-10, 10)) = 0.0
	_SpecOffset ("Specular Offset from Camera", Vector) = (1, 10, 2, 0)
	_SpecRange ("Specular Range", Float) = 20
	_SpecColor ("Specular Color", Color) = (0.5, 0.5, 0.5, 1)
	_Shininess ("Shininess", Range (0.01, 1)) = 0.078125
	_ScrollingSpeed("Scrolling speed", Vector) = (0,0,0,0)
}

SubShader {
	Tags { "RenderType"="Opaque" "LightMode"="ForwardBase"}
	LOD 100
	
	
	
	CGINCLUDE
	#include "UnityCG.cginc"
	sampler2D _MainTex;
	float4 _MainTex_ST;
	samplerCUBE _ReflTex;
	
	#ifndef LIGHTMAP_OFF
	float4 unity_LightmapST;
	sampler2D unity_Lightmap;
	#endif

	//float _MainTexMipBias;
	float3 _SpecOffset;
	float _SpecRange;
	float3 _SpecColor;
	float _Shininess;
	float4 _ScrollingSpeed;
	
	struct v2f {
		float4 pos : SV_POSITION;
		float2 uv : TEXCOORD0;
		#ifndef LIGHTMAP_OFF
		float2 lmap : TEXCOORD1;
		#endif
		fixed3 spec : TEXCOORD2;
	};

	
	v2f vert (appdata_full v)
	{
		v2f o;
		o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
		
		o.uv = v.texcoord + frac(_ScrollingSpeed * _Time.y);
		
		float3 viewNormal = mul((float3x3)UNITY_MATRIX_MV, v.normal);
		float4 viewPos = mul(UNITY_MATRIX_MV, v.vertex);
		float3 viewDir = float3(0,0,1);
		float3 viewLightPos = _SpecOffset * float3(1,1,-1);
		
		float3 dirToLight = viewPos.xyz - viewLightPos;
		
		float3 h = (viewDir + normalize(-dirToLight)) * 0.5;
		float atten = 1.0 - saturate(length(dirToLight) / _SpecRange);

		o.spec = _SpecColor * pow(saturate(dot(viewNormal, normalize(h))), _Shininess * 128) * 2 * atten;
		
		#ifndef LIGHTMAP_OFF
		o.lmap = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
		#endif
		return o;
	}
	ENDCG


	Pass {
		CGPROGRAM
		#pragma vertex vert
		#pragma fragment frag
		#pragma fragmentoption ARB_precision_hint_fastest		
		fixed4 frag (v2f i) : COLOR
		{
			fixed4 c = tex2D (_MainTex, i.uv);
			
			fixed3 spec = i.spec.rgb * c.a;
			
			#if 1
			c.rgb += spec;
			#else			
			c.rgb = c.rgb + spec - c.rgb * spec;
			#endif
			
			#ifndef LIGHTMAP_OFF
			fixed3 lm = DecodeLightmap (tex2D(unity_Lightmap, i.lmap));
			c.rgb *= lm;
			#endif
			
			return c;
		}
		ENDCG 
	}	
}
}
(:codeend:)
(:showhideend:)

(:showhide name="グロス風の頂点追加ライトプローブ":)
(:code:)
Shader "MADFINGER/Environment/Lightprobes with VirtualGloss Per-Vertex Additive" {
Properties {
	_MainTex ("Base (RGB) Gloss (A)", 2D) = "white" {}
	_SpecOffset ("Specular Offset from Camera", Vector) = (1, 10, 2, 0)
	_SpecRange ("Specular Range", Float) = 20
	_SpecColor ("Specular Color", Color) = (1, 1, 1, 1)
	_Shininess ("Shininess", Range (0.01, 1)) = 0.078125	
	_SHLightingScale("LightProbe influence scale",float) = 1
}

SubShader {
	Tags { "RenderType"="Opaque" "LightMode"="ForwardBase"}
	LOD 100
	
	
	
	CGINCLUDE
	#pragma multi_compile LIGHTMAP_OFF LIGHTMAP_ON
	#include "UnityCG.cginc"
	sampler2D _MainTex;
	float4 _MainTex_ST;
	
	
	float3 _SpecOffset;
	float _SpecRange;
	float3 _SpecColor;
	float _Shininess;
	float _SHLightingScale;
	
	struct v2f {
		float4 pos : SV_POSITION;
		float2 uv : TEXCOORD0;
		float3 refl : TEXCOORD1;
		fixed3 spec : TEXCOORD3;
		fixed3 SHLighting: TEXCOORD4;
	};

	
	v2f vert (appdata_full v)
	{
		v2f o;
		o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
		o.uv = v.texcoord;
		
		float3 worldNormal = mul((float3x3)_Object2World, v.normal);		
		float3 viewNormal = mul((float3x3)UNITY_MATRIX_MV, v.normal);
		float4 viewPos = mul(UNITY_MATRIX_MV, v.vertex);
		float3 viewDir = float3(0,0,1);
		float3 viewLightPos = _SpecOffset * float3(1,1,-1);
		
		float3 dirToLight = viewPos.xyz - viewLightPos;
		
		float3 h = (viewDir + normalize(-dirToLight)) * 0.5;
		float atten = 1.0 - saturate(length(dirToLight) / _SpecRange);

		o.spec = _SpecColor * pow(saturate(dot(viewNormal, normalize(h))), _Shininess * 128) * 2 * atten;
		
		o.SHLighting	= ShadeSH9(float4(worldNormal,1)) * _SHLightingScale;
		
		return o;
	}
	ENDCG


	Pass {
		CGPROGRAM
		#pragma vertex vert
		#pragma fragment frag
		#pragma fragmentoption ARB_precision_hint_fastest		
		fixed4 frag (v2f i) : COLOR
		{
			fixed4 c	= tex2D (_MainTex, i.uv);

			c.rgb *= i.SHLighting;
			c.rgb += i.spec.rgb * c.a;
			
			return c;
		}
		ENDCG 
	}	
}
}
(:codeend:)
(:showhideend:)

!! ベスト プラクティス

!!! GPU 最適化: アルファテスト

いくつかのGPU、特にモバイルデバイスのものは、アルファテスト(または $$discard$$ および $$clip$$ 演算のピクセルシェーダ) によりオーバーヘッドが大きくなります。アルファテストシェーダは出来る限りアルファブレンドのものと置き換えるべきです。アルファテストが避けられない場合、表示されるアルファテストされたピクセル数を最小にとどめるべきです。

!!! iOS テクスチャ圧縮

いくつかの画像、特にiOS/Android PVR テクスチャ圧縮はアルファチャネルで画像の乱れが発生しやすいものです。そのような場合、PVRT圧縮パラメータを画像ソフトウェアで直接変更が必要かもしれません。そのためにら ``PVR export plugin`` をダウンロードするかPVRTC形式の作成者である Imagination Techの [[http://www.imgtec.com/powervr/insider/powervr-pvrtextool.asp | ``PVRTexTool``]] を使用出来ます。結果となる ``.pvr`` 拡張子のついた圧縮画像ファイルはUnityエディタにより直接インポート出来て、指定された圧縮パラメータは保持されます。もしPVRT圧縮されたテクスチャで十分な見栄えとならない場合、またはクッキリした画像処理が必要な場合 (GUIテクスチャなどで) は16ビットテクスチャを32ビットの代わりに使用すべきです。それによってメモリ帯域幅およびストレージ要件を半分に節約出来ます。


!!! Android テクスチャ圧縮

OpenGL ES 2.0をサポートする全てのAndroidデバイスは [[Main.class-Texture2D | ETC1 圧縮形式]] もサポートします。このため可能な限りETC1を優先すべきテクスチャ形式とすることを推奨します。

もし特定のグラフィックス アーキテクチャ、すなわちNvidia Tegra または Qualcomm Snapdragon等、をターゲットとする場合、それらのアーキテクチャで利用可能な専用の圧縮形式を検討する価値があります。Android Marketもまた、サポートされるテクスチャ圧縮形式にもとづいたフィルタリングを許容していて、配布アーカイブ (.apk) に [[Main.class-Texture2D | DXT 圧縮テクスチャ]] をサポートしないデバイスへの配布を防止することが可能です。


!!! 演習

* [[http://u3d.as/content/forest-johnson/render-to-texel-baker/3fD | テクセルにレンダリング]] をダウンロード
* モデルにライティングを焼き込みます。
* 出力結果にPhotoshop上でさらにハイパスフィルタをかけます。
*  Render to Texel パッケージに含まれる "Mobile/Cubemapped" シェーダの中身を、低周波のライト詳細が頂点ライトで置き換えられるように、編集します。





