! iOS 特有の最適化

このページではiOSデプロイに特有の最適化を説明します。モバイルデバイス向けの最適化については [[Main.iphone-PracticalGuide | Practical Guide to Optimization for Mobiles]] を参照下さい。

!! スクリプト コール最適化
 Call Optimization
$$UnityEngine$$ 名前空間のほとあの関数はC/C++で実装されています。C/C++関数をMonoスクリプトからコールすることはパフォーマンス オーバーヘッドを伴います。iOS スクリプト コール最適化 (メニュー: ^^Edit->Project Settings->Player^^) を使用して毎フレーム1から4ミリ秒の節約が出来ます。この設定のオプションは:-
* __Slow and Safe__ - Monoのデフォルトであり、例外処理に対応した内部コール ハンドリング。
* __Fast and Exceptions Unsupported__ - Mono 内部コール ハンドリングのより速い実装です。例外処理はサポートされてないため使用は注意が必要です。例外を明示的にハンドリングしないアプリ (また、体よく対応がそもそも必要ない) はこのオプションが理想的です。

!! 希望のフレームレートをセット
Unity iOSによりアプリケーションがレンダリングループを実行する周波数を変更することが出来て、デフォルトでは30フレーム毎秒です。バッテリー消費を節約するためにこの数字を下げることは出来ますが、この節約は当然にフレーム更新が犠牲になります。反対にフレームレートを増やして、タッチ入力および加速度センサー処理といった、他の活動よりもレンダリングの優先度をあげることが出来ます。フレームレートを調整して実際のゲームプレイへの影響を判断する必要があります。

もしアプリケーションが重たい処理やレンダリングを伴い、例えば15フレーム毎秒しか維持出来ない場合、希望のフレームレートを15以上に設定したこらといってパフォーマンスは上がりません。アプリケーションは十分に最適化しないと高いフレームレートは得られません。

希望のフレームレートをセットするにはUnityにより生成されたXCodeプロジェクトを開いて@@AppController.mm@@ ファイルを開きます。


[@#define kFPS 30@]

...により、現在のフレームレートを決定するため希望の値に変更するのみです。例えば、もしdefineを次のように変更した場合:-

[@#define kFPS 60@]

...そうするとアプリケーションは30FPSではなく60 FPSでレンダリングを試みます。

!! レンダリング ループ

iOS 3.1またはそれ以降が使用されている場合、Unityは ``CADisplayLink`` クラスを使用してレンダリング ループをスケジューリングします。3.1より前のバージョンはfallback手法のいずれかを使用してループをハンドリングします。しかし、fallback手法はiOS 3.1以降でも次の行の変更によや有効化出来ます

[@#define USE_DISPLAY_LINK_IF_AVAILABLE 1@]

...変更後は次のようにします。

[@#define USE_DISPLAY_LINK_IF_AVAILABLE 0@]

!!! Fallbackループ種類

AppleはiOS3.1より前のバージョンではレンダリング ループのスケジューリングにはシステムタイマーを推奨しています。このアプローチはパフォーマンス要求が厳しくない、バッテリー消費を抑えたい、さらにレンダリング パフォーマンスよりもイベントの正しい処理 が優先されるアプリケーションに適しています。しかしゲームにとってレンダリングパフォーマンスの方がより重要なケースが多く、このためUnityはいくつかのスケジュール手法を用いてレンダリング ループのパフォーマンスを調整出来ます。

* __System Timer:__ これがAppleにより推奨される標準的なアプローチです。 ``NSTimer`` を用いてレンダリングのスケジューリングを行い、レンダリング パフォーマンスは最も悪くなりますが、すべての入力イベントを処理することが保証されます。
* __Thread:__ レンダリングをスケジューリングするために別のスレッドが使用されます。これによりNSTimerアプローチよりもパフォーマンスは向上しますが、タッチ入力や加速度センサーのイベントが漏れたりします。このスケジュール手法は、セットアップが、最も簡単でUnityによりiOS3.1より前のバージョンではデフォルトで使用されます。
* __Event Pump:__ これは ``CFRunLoop`` オブジェクトを使用してイベントのディスパッチを行います。NSTimerアプローチよりもレンダリング パフォーマンスは向上し、さらにOSがタッチ入力や加速度センサーのイベントに要する時間を設定することが出来ます。このオプションは慎重に使用する必要があり、ハンドリングするためのプロセッシング時間がない場合に、タッチ入力や加速度センサーのイベントは失われます。
異なるfallbackループの種類はAppController.mm ファイルでdefineを変更することで選択が出来ます。重要なぎょは次の通りです:-

[@#define FALLBACK_LOOP_TYPE NSTIMER_BASED_LOOP
#define FALLBACK_LOOP_TYPE THREAD_BASED_LOOP
#define FALLBACK_LOOP_TYPE EVENT_PUMP_BASED_LOOP@]

このファイルは一行を除いて全てコメントアウトすべきです。コメントアウトされない行はアプリケーションに、より使用されるレンダリング ループ手法を選択します。

もしレンダリングを入力処理よりも優先したい場合は次の行を見つけて変更する必要があります。

[@#define kThrottleFPS 2.0@]

AppController.mmの中身です。この数字を増加させることでレンダリングを優先することが出来ます。この値の変更結果はアプリケーションにより異なるため、自ら試行して特定ケースで何が起きるか確認すべきです。

もしEvent Pumpレンダリングループを使用して期待する反応を得るためには @@kMillisecondsPerFrameToProcessEvents@@ 定数を調整する必要があります。 @@kMillisecondsPerFrameToProcessEvents@@ 定数により具体的にOSがイベントを処理するのにどれぐらいの時間を許容するか (ミリ秒単位で) 指定することが出来ます。もし十分な時間をこのタスクに割り当てなかった場合、タッチ入力や加速度センサーのイベントが失われるかもしれず、アプリケーションは速くなっても反応は悪くなります。

OSがイベントの処理に要する時間を (ミリ秒単位で) 指定するためには次の行を見つけて変更する必要があります。

[@#define kMillisecondsPerFrameToProcessEvents 7.0@]

AppController.mmの中身です


!! 加速度センサーの周波数のチューニングTuning Accelerometer Processing Frequency
もし加速度センサー入力があまりに頻繁に処理される場合ゲーム全体のパフォーマンスが結果的に影響を受けるかもしれません。デフォルトでは、Unity iOSアプリケーションは加速度センサーを60回毎秒サンプリングを行います。加速度センサーのサンプリング周波数を下げるとこでパフォーマンス 改善がみられるかもせれず、加速度センサーを使用しないゲームではゼにに、設定することさえも出来ます。加速度センサーの周波数を変更するには [[class-PlayerSettings|iOS Player Settings]] の``Other Settings`` から変更します。
