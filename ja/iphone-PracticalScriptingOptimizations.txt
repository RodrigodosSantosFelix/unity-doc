! モバイル最適化のための実用ガイド - スクリプトの最適化

このセクションにより実用的にゲームで使用するスクリプトやメソッドをどのようにして最適化し、さらに最適化の原理ともに、どうしてと個々の状況で適用することで役立つのかを実証して行きます。

!! [[Main.Profiler | Profiler]] は最強のツール (Unity Proのみ)

プロジェクトがスムーズに動作することを保証してくれる魔法のチェックリストはありません。遅いプロジェクトを最適化するには分相応に時間を消費する特別要因をプロファイリングする必要があります。プロファイリングせずに、またはprofilerが提供するデータを十分に理解せずに最適化を試みるのは目隠しをして最適化するのと変わりありません。

モバイルプラットフォームで実行される技術的な要求の高いゲームを作成したい場合、 [[Main.Profiler | Profiler]] を使用するめに Unity Pro が必要かもしれません。

!!! フリー版だとどうするか

[[Main.iphone-InternalProfiler | internal profiler]]  を使用してどんなプロセスががゲームを遅くしているか、例えば物理演算なのか、スクリプトか、レンダリングか、までは判断出来ますが、遅延要因となっている具体的なスクリプトやメソッドにドリルダウン出来ません。しかしゲームの中にスイッチを作成して、最大要因の絞り込みを極めて効率的に見つけることは出来ます。例えば敵キャラクターのAIスクリプトを取り除いたときにフレームレートが二倍になれば、そのスクリプトあるいはそれがゲームにもたらす何かが最適化の対象であることが分かります。唯一の障壁は、様々な実験をしないと問題が見つけられないことです。

モバイルデバイスでのプロファイリングについての詳細は [[Main.iphone-PracticalGuide#Profile | profiling section]] を参照下さい。

!! 設計での最適化

最初から速いものを開発しようとすることはリスクを伴い、最適化せずとも同じ速さの内容に無駄な時間をかけることになることと、結果的に遅くなって後から削除するか置き換えるか、そのトレードオフになるためです。良い判断に求められるのは直感とハードウェアに関する知識であり、ゲームはひとつひとつが異なるものなので、たとえひとつのゲームで決定的な最適化であっても別のゲームではブレーキになる可能性があります。

##Object Pooling##
!!! オブジェクト プーリング

[[Main.iphone-OptimizedScriptingMethods | スクリプティング手法の最適化の紹介]] において、オブジェクト プーリングを優れたゲームプレイと優れたコード設計の接点として紹介しました。短命な オブジェクトについてオブジェクト プーリングを使用するのはオブジェクトを作成して破棄するよりも速くなりますが、その理由はメモリ割り当てをシンプルにして動的なメモリ割り当てのオーバーヘッドおよびガーベージコレクション（GC）をなくすためです。

!!! メモリ割り当て

(:showhide name="自動メモリ管理とは何かの説明":)
Unityで記述するスクリプトは自動メモリ管理を使用します。ほぼ全てのスクリプティング言語でこれが行われてます。対照的に低水準言語にあたる C および C++ は手動でメモリ割り当てをを行い、プログラマがメモリを読み書きをメモリアドレスに対して直接に行うことが出来て結果として作成したオブジェクトの全てを削除する責任があります。例えばC++ではメモリを使用し終わった後に手動で割り当てを解除する必要があります。スクリプティング言語では ``@@objectReference = null;@@`` とすれば事足ります。

__注意:__ もし ``@@GameObject myGameObject;@@`` or ``@@var myGameObject : GameObject;@@` というようなゲームオブジェクト変数があった場合、``@@myGameObject = null;@@`` とするだけで何故破棄されないのでしょうか。
* ゲームオブジェクトはUnityによりまだ参照されていて、その理由はUnityが描画、更新、その他を行うために参照を維持する必要ごあるためです。 ``@@Destroy(myGameObject);@@`` をコールすることで参照は外され、オブジェクトは削除されます。

しかしUnityが関知しないオブジェクトを作成した場合、例えば何からも継承されてないクラスのインスタンスを作成した場合(対照的にほとんどのクラスまたは "スクリプト コンポーネント " は[[ScriptRef:MonoBehaviour.html | MonoBehaviour]] から継承される)、さらに参照変数をnullとした場合、実際に起きることはスクリプトやUnityからみるとオブジェクトは見つけられなくなり、アクセスも出来ませんがめに残ります。その後、ガーベージコレクションが行われてどこからも参照されてないものはメモリから除きます。これは舞台裏では、メモリブロックへの参照の数がトラッキングされているためです。これはスクリプティング言語がC++より低速である理由のひとつです。
(:showhideend:)

詳細については [[Main.UnderstandingAutomaticMemoryManagement | 自動メモリ管理およびガーベージコレクション]] を参照下さい。

!!! メモリ割り当ての回避方法

オブジェクトが作成されるたびにメモリは割り当てられます。しばしばコードの中で知らずにオブジェクトを作成しています。

* ``Debug.Log("boo" + "hoo");`` によりオブジェクトが作成されます。
** 文字列を数多く扱う場合は ``System.String.Empty`` を ``""`` の代わりに使用して下さい。

* ImmediateモードのGUI (UnityGUI)は遅く、パフォーマンスが重要であるときは、いかなる場合も使用すべきではありません。

* ``クラス`` と ``構造体`` の違い :
>>padding="0px 0px 0px 50px"<<
(:showhide name="クラス 対 構造体":)
クラスはオブジェクトであり参照として動作します。``Foo``がクラスであると仮定して
(:code:)
Foo foo = new Foo();
MyFunction(foo); 
(:codeend:)
である場合、``MyFunction`` は、ヒープ上で割り当てられた、もとのFooオブジェクトに対する参照を受け取ります。

クラスはデータであり、そのように動作します。もし ``Foo`` が構造体であると仮定して
(:code:)
Foo foo = new Foo();
MyFunction(foo); 
(:codeend:)
である場合、``MyFunction`` は、``foo``のコピーを受け取ります。``foo`` はヒープ上で割り当てられることはなく、ガーベージコレクションもされません。もし ``MyFunction``が``foo``のコピーを修正しても、もうひとつの``foo``は影響を受けません。
(:showhideend:)
>><<
*生存期間の長いオブジェクトはクラスとすべきであり、短命のオブジェクトは構造体であるべきです。 [[ScriptRef:Vector3.html|Vector3]] はもっとも知られた構造体です。もしこれがクラスであったら全てが大分遅くなっていたはずです。

!!! オブジェクト プーリングが速い理由

この長所は__Instantiate および Destoryを使用することによりガーベージコレクションがやることが増える__ ということになり、ゲームプレイにおける "遅延" につながります。[[Main.UnderstandingAutomaticMemoryManagement | 自動メモリ管理のページ]] で説明しているとおり、Instantiate および Destoryを取り巻く、良くあるパフォーマンスの遅延を回避する方法は他にもあり、例えば何もないときにガーベージコレクションをトリガーするとか、頻繁にトリガーすることで大きな未使用のバックログが積みあがらないようにする、とかいった方法です。

もうひとつの理由は、特定のプレハブが初めてインスタンス化されたとき、ときどき RAM に追加のものがロードされる必要があることや、テクスチャおよびメッシュが GPU にアップロードする必要があるためです。これもまた遅延を起こすことがあり、オブジェクト プーリングによりこれをゲームプレイではなくレベルロードのときに起こすことが出来ます。

人形使いが無限の数の操り人形を箱の中に詰め込んでいると想像してみて、キャラクターが登場するようにスクリプトがコールするたびに、新しい人形を取り出して、人形が舞台から消えるたびに現在の人形を箱に戻します。オブジェクトプールというのは、舞台が始まる前に、最初から全ての人形を箱から取り出して、登場しないときはステージの裏のテーブルに隠しておくことです。

!!! オブジェクト プーリングにより遅くなる場合の理由

ひとつ問題があることとして、オブジェクト プールの作成により他の目的で利用可能であるヒープのメモリを消費してしまうことです。もしオブジェクト プールの使用に加えて、メモリを割り当て続けると、通常よりもガーベージ コレクションを引き起こすかもしれません。それだけでなく、個々のガーベージコレクションも遅くなり、その理由はガーベージコレクションの処理時間は活動しているオブジェクトの数により増加するためです。この問題を念頭に入れておくと、大きすぎるオブジェクトプールや長い期間使用しないときに有効にし続けるとパフォーマンスに問題が出ることは明白です。さらに、多くのオブジェクトにおいてはオブジェクトプールに向かない場合があります。例えばゲームでは継続した効果が続く魔法であるとか、大量に登場する敵が徐々にしかやっつけられないとか、いった場合です。そのような場合、オブジェクト プールのオーバーヘッドは徐々に使用しない場合のメリットを上回るようになります。

!!! 実装

次にシンプルな発射物を使用して、片方がインスタンス化、片方がオブジェクトプールを使用した簡単な比較例を紹介します。

(:showhide name="オブジェクト プーリング のサンプル":)
>>font-size=11px<<
(:table border=0:)
(:cellnr:)
(:code:)
// GunWithInstantiate.js

#pragma strict

var prefab : ProjectileWithInstantiate;

var power = 10.0;















function Update () {
    if(Input.GetButtonDown("Fire1")) {
        var instance : ProjectileWithInstantiate = 
	Instantiate(prefab, transform.position, transform.rotation);
        instance.velocity = transform.forward * power;
    }
}








(:codeend:)
(:cell:)
(:code:)
// GunWithObjectPooling.js

#pragma strict

var prefab : ProjectileWithObjectPooling;
``var maximumInstanceCount = 10;``
var power = 10.0;

``private var instances : ProjectileWithObjectPooling[];``

``static var stackPosition = Vector3(-9999, -9999, -9999);``

``function Start () {``
    ``instances = new ProjectileWithObjectPooling[maximumInstanceCount];``
   `` for(var i = 0; i < maximumInstanceCount; i++) {``
        ``// 使用されないオブジェクトの山をマップ上から大きく離れた場所に置く
        ``instances[i] = Instantiate(prefab, stackPosition, Quaternion.identity);``
        ``// デフォルトで無効化し、これらのオブジェクトがアクティブでないようにする
        ``instances[i].enabled = false;``
    ``}``
``}``

function Update () {
    if(Input.GetButtonDown("Fire1")) {
        var instance : ProjectileWithObjectPooling = ``GetNextAvailiableInstance();``
        ``if(instance != null) {``
            ``instance.Initialize(transform, power);``
        ``}``
    }
}

``function GetNextAvailiableInstance () : ProjectileWithObjectPooling {``
    ``for(var i = 0; i < maximumInstanceCount; i++) {``
        ``if(!instances[i].enabled) return instances[i];``
    ``}``
    ``return null;``
``}``
(:codeend:)
(:cellnr:)
(:code:)
// ProjectileWithInstantiate.js

#pragma strict

var gravity = 10.0;
var drag = 0.01;
var lifetime = 10.0;

var velocity : Vector3;

private var timer = 0.0;









function Update () {
    velocity -= velocity * drag * Time.deltaTime;
    velocity -= Vector3.up * gravity * Time.deltaTime;
    transform.position += velocity * Time.deltaTime;
    
    timer += Time.deltaTime;
    if(timer > lifetime) {

        Destroy(gameObject);
    }
}
(:codeend:)
(:cell:)
(:code:)
// ProjectileWithObjectPooling.js

#pragma strict

var gravity = 10.0;
var drag = 0.01;
var lifetime = 10.0;

var velocity : Vector3;

private var timer = 0.0;

``function Initialize(parent : Transform, speed : float) {``
    ``transform.position = parent.position;``
    ``transform.rotation = parent.rotation;``
    ``velocity = parent.forward * speed;``
    ``timer = 0;``
    ``enabled = true;``
``}``

function Update () {
    velocity -= velocity * drag * Time.deltaTime;
    velocity -= Vector3.up * gravity * Time.deltaTime;
    transform.position += velocity * Time.deltaTime;
    
    timer += Time.deltaTime;
    if(timer > lifetime) {
        ``transform.position = GunWithObjectPooling.stackPosition;``
        ``enabled = false;``
    }
}
(:codeend:)
(:tableend:)
>><<
(:showhideend:)

当然ながら、大規模で複雑なゲームでは、全てのプレハブに適用できる汎用的な解決策が必要です。

!! 別のサンプル: コインパーティ

"回転していて、動的ライティングがなされて、集められるコインが画面上に同時に百個ある" サンプルは [[Main.iphone-OptimizedScriptingMethods | スクリプティング手法のセクション]] で紹介されてますが、今回はこれによりスクリプトコード、パーティクルシステムのようなUnityコンポーネント、およびカスタムシェーダを使用して貧弱なモバイルハードウェアに負荷を与えずに刺激的なエフェクトを作成できることを紹介します。

このエフェクトを使用しているゲームが、2D横スクロールゲームで大量のコインが落ち、跳ねて、回転するところを想像して下さい。コインは動的にポイントライトによりライティングされます。ゲームの中のコインからきらめく光をより魅力的なものにしたいとします。

もし強力なハードウェアがあれば、この課題に対して標準的なアプローチも出来ます。全てのコインをオブジェクトとして、オブジェクトを頂点ライティング、フォワード、またはデファード ライティング によりシェーディングを行い、それからグローをイメージエフェクトとして加えて、コインのきらめきを周囲に光が広がるようにします。

しかしモバイルハードウェアでは多くのオブジェクトだけで苦しみ、グローエフェクトは全くの問題外です。ではどうすれば？

##Animated_Sprite_Particle_System##
!!! アニメーションつきのスプライト パーティクルシステム

%thumb width=300px float=right padding=5px%Attach:coinsLighting.jpg

もし大量のオブジェクトが全て同様に動作して、プレイヤーが注意深く観察できない前提であれば、大量のオブジェクトをパーティクルシステムによりあっという間にレンダリングできるかもしれません。このテクニックを型通りに適用したサンプルを示します：

* 拾うアイテムやコイン
* 飛ぶ散る破片
* [[http://www.gamespot.com/ikaruga/images/580047/ | 無数の単純な敵]]
* 喜ぶ観衆
* 数百の発射物や爆発

無料のエディタ拡張で、 [[http://u3d.as/content/forest-johnson/sprite-packer-with-legacy-particle-emitter-to-shuriken-converter-/34E | スプライト パッカー]] と呼ばれるものがあり、アニメーションつき スプライト パーティクルシステムの作成を手助けしてくれます。オブジェクトのフレームをテクスチャにレンダリングして、次にアニメーションつきのスプライトシートとしてパーティクルシステムでしようすることが出来ます。今回のサンプルでいえば、回転するコインに使用します。

!!! 参考の実装例

%thumb width=250px float=right padding=5px%Attach:coinsParts.jpg

 [[http://u3d.as/content/forest-johnson/sprite-packer-with-legacy-particle-emitter-to-shuriken-converter-/34E | スプライト パッカー プロジェクト]] には、全く同じ問題に対する解決策のデモがあります。

さまざまな種類のアセット群を使用して、計算負荷を抑えながら、まばゆいばかりのエフェクトを達成しています:

* 制御スクリプト
* スプライト パッカー外部で作成された専用のテクスチャ
* 制御スクリプトおよびテクスチャの両方に密接に結びついた専用のシェーダ

readme ファイルがサンプルに含まれていて、システムがどのようにしてどうやって動作するか説明し、どのような機能が必要であったか判断した過程の概略や、どのようにして実装しているか、などを説明しています。これがそのファイルです:

(:showhide name="コイン パーティ README":)
お題は "回転していて、動的ライティングがなされて、集められるコインが画面上に同時に百個ある" です。

ばか正直なアプローチは コインのプレハブを大量にインスタンス化することですが、その代わりにパーティクルをしようしてコインをレンダリングします。これは一方で、いくつかの乗り越えなければ行けないチャレンジが発生します。

* 視野角（ビューアングル）は問題で、パーティクルにはありません。
** カメラが正しい向きでじっとしていることと、コインがY軸を中心に回転していることが前提です。
** コインが回転しているように見せかけるために、アニメーションつきテクスチャを使用し、あらかじめスプライトパッカーによりパックしておきます。
*** これにより新たな問題が生じます: 回転するコインが全て同じスピードで同じ向きであることの単調さです
*** 回転や生存期間をトラッキングして、パーティクル の生存期間中に 回転を "レンダリング" させてこの問題を解決します

*パーティクルには存在しないため、法線をどうするかは問題でありリアルタイムのライティングが必要ですい
** スプライトパッカーにより生成された各アニメーションフレームに対してコインの面にひとつの法線ベクトルを生成します
** スクリプトの各パーティクルでBlinn-Phongライティングを、上記で決めた法線ベクトルにもとづいて行います
** パーティクルの残り部分にカラーとして結果を適用します。
** コインの面およびコインの縁を別のシェーダとしてハンドリングします。
*** これにより新たな問題が生じます: シェーダはどのようにして縁がどこにあるか知り、そして縁のどの部分であるかを知るのか？
**** UVはすでにアニメーションに使用されており使用できません
**** テクスチャマップを使用します
***** コインに対応する Y 位置が必要です
***** "面にある" vs "縁にある" の2変数が必要です
**** 新たなテクスチャを増やしてしまうと、テクスチャ読み込み、テクスチャ メモリの増加につながるため、増やしたくありません
**** 必要な情報をひとつのチャネルに組み合わせてテクスチャの色のチャネルのひとつと置き換えます
***** コインがおかしな色になります。これの対策はどうする？
***** シェーダを使って、不足するチャネルを、残った二つの情報を組み合わせて再構築します
					
* コインからの光のきらめきからグローがほしいとします。モバイルデバイスにとっては後処理が高価すぎます
** 別のパーティクルシステムを作成して、やわらげたグロー風のコインアニメーションのバージョンにします。
** コインの色が極めて明るいときのみグローに色づけを行います。
** グローを全てのコインで毎フレームを行うことは出来ません - フィルレートが耐え切れません。
*** 毎フレーム、グローをリセットし、明るさ (brightness) > 0 のもののみ配置します。

* 物理演算、コインを集めることはともに問題です - パーティクルはうまく衝突しません。
** 内蔵パーティクルの衝突は使用できるか？
** そうではなく、単にスクリプトの中にコリジョンを記述した
		
* 最後に、大きな問題がひとつ残っています - スクリプトは大量の演算があり、どんどん遅くなっています。
** パフォーマンスはアクティブなコインの数と比例します。
*** 最大のコイン数を制限します。次の設定のみでゴール達成のためには十分機能します: 100 コイン、 2つのライト でモバイルデバイスで十分に速く動作します。
		
* さらに最適化すべきこと:
** ライティングをすべてのコインで個別に計算するのではなく、ゲーム世界をかたまりに分けてライティング条件をすべてのかたまりの回転フレームで計算します。
*** コイン位置と回転をインデックスとした ルックアップ テーブルを使用します。
*** 位置とともに双線形補間を使用して再現性を高めます
*** ルックアップテーブルへのアップデートがまばら、または完全に static なルックアップテーブルにします。
*** このために ライト プローブを使用する？
			
** スクリプトでライティングを計算する代わりに、法線マップ パーティクルを使用する？
*** "Display Normals" （法線表示）シェーダを使用して法線のフレームアニメーションを焼き込みます
*** ライトの数を限定します。
*** スクリプトが遅い問題が解決されます。
(:showhideend:)

このサンプルの最終目標、あるいは "話の教訓" はゲームの中に必要な部分があり、それを既存の手法で成し遂げようしても遅い場合、それは解決が不可能だということではなくて、より速く走る独自のシステムによって速く動かす必要がある、ということです。


!!! 何千のオブジェクトを管理するテクニック

これらは、何百または何千という動的オブジェクトが絡んだ状況での、具体的なスクリプティング最適化です。これらのテクニックをゲームの全てのスクリプトに適用するのは最悪な考えで、大規模なスクリプトのなかで、実行時に大量のオブジェクトやデータを扱うためのツールおよび設計ガイドラインとしてとっておくべきです。

* 大きなデータセットで O(n'^2^') 演算を回避または最小化
>>padding="0px 0px 0px 50px"<<
(:showhide name="オーダー n の二乗":)
計算機科学では、演算の ``オーダー`` は ``O(n)`` と表現され、その演算が評価される回数が、それが適用されているオブジェクトの数 (``n``) の増加に伴って増加する様子を表現しています。

例えば、基本的なソーティング アルゴリズムを考えます。n 個の数があり、最も小さいものか最も大きいものまで並び替えたいとします。
(:code:)
void sort(int[] arr) {
	int i, j, newValue;
	for (i = 1; i < arr.Length; i++) {
		// 記録する
		newValue = arr[i];
		//大きい場合は全て右にシフト
		j = i;
		while (j > 0 && arr[j - 1] > newValue) {
			arr[j] = arr[j - 1];
			j--;
		}
		// 記録した値を大きい値の左に配置
		arr[j] = newValue;
	}
}(:codeend:)

重要なところは二つのループがあり、ひとつがもうひとつの中にあることです。

(:code:)
for (i = 1; i < arr.Length; i++) {
	...
	j = i;
	while (j > 0 && arr[j - 1] > newValue) {
		...
		j--;
	}
}
(:codeend:)

アルゴリズムに対して最悪ケースを与えたとします: 入力される数字はソートされているけれども全く逆の順序です。この場合、もっとも内側のループは  ``j`` 回実行されます。平均では、 ``i`` が ``1`` から ``arr.Length-1`` に行く間に ``j`` は　``arr.Length/2`` になります。``O(n)`` に関して言えば、``arr.Length`` が ``n`` に相当して、全体でみるともっとも内側のループは ``n*n/2`` 回、すなわち``n'^2^'/2`` 回実行されます。しかし ``O(n)`` 用語では、 ``1/2`` といった定数は全て放棄します。その理由は、実際の演算の回数ではなくて、演算の回数の増え方について議論をしたいためです。このためアルゴリズムは ``O(n'^2^')`` です。データセットが大きい場合に、演算の順番は大きく関係があり、演算の回数は等比級数的に爆発する可能性があるためです。

ゲーム内での ``O(n'^2^')`` 演算の例をあげると、 100人の敵がいるとして、各々のAIが他の敵全ての動きを考慮するようなケースです。マップをセルに分解して、各々の敵の動きを最も近いセルに記録して、次に各々の敵にもっとも近い数個のセルをサンプリングしたほうが速いかもしれません。これにより  ``O(n)`` 演算に抑えることが出来ます。
(:showhideend:)
>><<

* 不要な探索を行う代わりに辞書をキャッシュする
>>padding="0px 0px 0px 50px"<<
(:showhide name="辞書のキャッシング":)
例えばゲームに100人の敵がいたとして、各々キャラクターに向かって動くとします。
(:code:)
// EnemyAI.js
var speed = 5.0;

function Update () {
	transform.LookAt(GameObject.FindWithTag("Player").transform);
	// これはより悪化:
	//transform.LookAt(FindObjectOfType(Player).transform);

	transform.position += transform.forward * speed * Time.deltaTime;
}(:codeend:)

同時実行されている数が十分に多い場合、これは遅いかもしれません。あまり知られてない事実として、 ``[[ScriptRef:MonoBehaviour.html | MonoBehaviour]]` のコンポーネントのアクセスを行うもの、 ``transform`` 、 ``renderer`` 、 および ``audio`` は全て ``GetComponent(Transform)`` と同様でありやや遅いものです。 ``[[ScriptRef:GameObject.html | GameObject]].FindWithTag`` は最適化をされてはいるものの、それでもいくつかのケース、例えば内部ループや多くのインスタンス上で実行される場合、スクリプトはやや遅くなるかもしれません。

改良バージョンのスクリプトは次の通りです。
(:code:)
// EnemyAI.js
var speed = 5.0;

private var myTransform : Transform;
private var playerTransform : Transform;

function Start () {
	myTransform = transform;
	playerTransform = GameObject.FindWithTag("Player").transform;
}

function Update () {
	myTransform.LookAt(playerTransform);

	myTransform.position += myTransform.forward * speed * Time.deltaTime;
}
(:codeend:)
(:showhideend:)
>><<

* 高価な数学関数を最小化します
>>padding="0px 0px 0px 50px"<<
(:showhide name="高価な数学関数":)
超越関数  (``Mathf.Sin``、 ``Mathf.Pow``、 その他)、除算、および平方根の計算は乗算の100倍の時間を要します。（全体からみれば個別は一瞬かもしれませんが、これをフレームごとに千回コールしているのであれば計算時間は積み上がってきます。）

もっとも良くあるケースはベクトルの正規化です。同じベクトルを繰り返し正規化する場合、代わりに一回だけ正規化をして後続で使用するときのために結果をキャッシュしておくのを検討してください。

もしベクトルの長さおよびその正規化されたものの両方を使用しているのであれば、ベクトルを正規化されたベクトルを取得するには、長さの逆数を乗算する方が ``.normalized`` プロパティを使用するよりも高速になります。

もし距離を比較するのであれば実際の距離を比較する必要がありません。距離の2乗を ``.sqrMagnitude`` プロパティを代わりに用いて比較することで平方根計算をひとつかふたつ節約できます。

追加でさらにひとつ、もし定数 ``c`` により繰り返し除算を行う場合、代わりに逆数を乗算することができます。あらかじめ ``1.0/c`` を使用して逆数を先に計算しておきます。
(:showhideend:)
>><<

* 高価な演算の計算頻度は下げます 例 Physics.Raycast()
>>padding="0px 0px 0px 50px"<<
(:showhide name="コール頻度の節約":)
もし高価な演算があるとして、最適化するにはその頻度を下げて結果をキャッシュすると良いかもしれません。例えばRaycastを使用する発射物のスクリプトを考えてみます:

(:code:)
// Bullet.js
var speed = 5.0;

function FixedUpdate () {
	var distanceThisFrame = speed * Time.fixedDeltaTime;
	var hit : RaycastHit;

	// 毎フレーム、 現在地から forwad 方向に Raycast して次のフレームの場所を計算
	if(Physics.Raycast(transform.position, transform.forward, hit, distanceThisFrame)) {
		// Do hit
	} else {
		transform.position += transform.forward * distanceThisFrame;
	}
}
(:codeend:)

このスクリプトはFixedUpdate を Update で置き換えて、fixedDeltaTime を deltaTime で置き換えることにより直ちに改善が出来ます。FixedUpdate は 物理演算の Update に該当し、フレーム Updateより頻度が高くなります。しかしさらに一歩進めて Raycasting を n 秒おきにするようにします。より小さな n の値とすることで一時的な解像度があがり、そしてより大きな n の値とすることでパフォーマンスがより良くなります。ターゲットが大きくて遅いほど、n は一時的なエイリアシングが発生するまでに n がより大きな値となります。（ラテンシーの見え方、プレイヤーがターゲットに当たるけれども爆発はターゲットが n 秒前にいたところで発生するか、またはプレイヤーがターゲットに当たったけれども、何もおきず通過してしまいます））

(:code:)
// BulletOptimized.js
var speed = 5.0;
var interval = 0.4; // this is 'n', in seconds.

private var begin : Vector3;
private var timer = 0.0;
private var hasHit = false;
private var timeTillImpact = 0.0;
private var hit : RaycastHit;

// 初期インターバルのセットアップ
function Start () {
	begin = transform.position;
	timer = interval+1;
}

function Update () {
	// フレームより小さなインターバルを許容しません
	var usedInterval = interval;
	if(Time.deltaTime > usedInterval) usedInterval = Time.deltaTime;

	// 毎インターバルごとに、インターバルの最初に、現在の位置から forward 方向にRaycastして
	// そこが次のインターバルの最初にいる位置となります
	if(!hasHit && timer >= usedInterval) {
		timer = 0;
		var distanceThisInterval = speed * usedInterval;

		if(Physics.Raycast(begin, transform.forward, hit, distanceThisInterval)) {
			hasHit = true;
			if(speed != 0) timeTillImpact = hit.distance / speed;
		}

		begin += transform.forward * distanceThisInterval;
	}

	timer += Time.deltaTime;

	// Raycast が何かに当たった後、弾丸が、交差する Ray の位置
	// まで実際に移動して当たるまで待機
	if(hasHit && timer > timeTillImpact) {
		// 当たる
	} else {
		transform.position += transform.forward * speed * Time.deltaTime;
	}
}
(:codeend:)

(:showhideend:)
>><<


* 内部ループでのコールスタックのオーバーヘッドを最小化
>>padding="0px 0px 0px 50px"<<
(:showhide name="コールスタックのオーバーヘッド":)
関数を呼ぶだけで、少しのオーバーヘッドになります。もし ``x = Mathf.Abs(x)`` という形で毎フレームごとに1000回コールしているのであれば、代わりに ``x = (x > 0 ? x : -x);`` とするほうが良いかもしれません
(:showhideend:)
>><<


!!! 物理演算パフォーマンスの最適化
Unityが使用するNVIDIA PhysX 物理エンジンはモバイルで利用可能ですが、ハードウェアのパフォーマンス限界はデスクトップよりもモバイルプラットフォームで、より到達しやすくなります。

* 物理演算をチューニングしてモバイルでより良いパフォーマンスを得るためのテクニックです:-
*  ``Fixed Timestep`` 設定を調整 ( [[Main.class-TimeManager|Time manager]] の中) して物理演算の Update に要する時間を削減できます。Timestep を増加させることで CPU オーバーヘッドが減少し、その代償として物理演算の正確性が落ちます。多くの場合で正確性はパフォーマンスと引き換えであれば受け入れできる状況のトレードオフになります。 
* [[Main.class-TimeManager|Time manager]] の ``Maximum Allowed Timestep`` を 8-10fps 範囲として、最悪シナリオでの物理演算に要する時間の上限とします。
* メッシュコライダはプリミティブ コライダより大きいパフォーマンス オーバーヘッドがあるため、慎重に使用して下さい。メッシュの形状は多くの場合で、プリミティブ コライダを使用した子オブジェクトを使用することで、近似することが可能です。子コライダは親の Rigidbody の複合コライダにより、まとめて制御できます。
* ホイール コライダは厳密には固定オブジェクトという意味ではコライダではありませんが、それでも高いCPUオーバーヘッドがあります。




