!Unity 3.x シェーダ 移行ガイド / Unity 3.x Shader Conversion Guide

Unity 3 にはレンダリングシステムへの新しい機能および変更があり、ShaderLab もあわせて更新しています。いくつかのUnity 2.x で使用されていた発展的なシェーダ、特にピクセルライティングで使用されたものは Unity 3 で更新が必要です。もし更新に問題があれば - サポートに問い合わせ下さい。

一般的なグラフィックス関連の Unity 3 アップグレードの詳細については [[Rendering Upgrade Details]] を参照下さい。

Unity 2.x のプロジェクトを Unity 3.x で開くとき、自動的にシェーダファイルを出来る限りアップグレードします。以下のドキュメントで、シェーダに対して行われた全ての変更を一覧にしていて、手動のシェーダ アップグレードが必要な場合に何をすればよいのか記されています。


!! ピクセル ライティング シェーダ

Unity 2.x で、ピクセル単位でライティングしたシェーダはかなり複雑でした。それらのシェーダは複数のパスがあり、各々に $$LightMode$$ タグがありました（通常は ``PixelOrNone`` 、 ``Vertex`` 、 および ``Pixel``）。Unity 3.0 で [[RenderTech-DeferredLighting | Deferred Lighting]] および 古いForward Rendering への変更を加えて、より簡単、より堅牢、より将来も保証されるライティングと相互作用を行うシェーダの記述方法が必要でした。 [[SL-SurfaceShaders | Surface Shaders]] とするためには__全ての古いピクセルライティング シェーダは書き直す必要があります__ 。


!! Cg シェーダの変更

!!! ビルトイン "glstate" 変数リネーム

Unity 2.x では、いくつかのビルトイン変数（例えば model*view*projection 行列）は、例えば @@glstate.matrix.mvp@@ のような、ビルトインのCg名で可能でした。しかし、それはいくつかのプラットフォームでは動作しないため、Unity 3.0 ではそれらのビルトイン変数をリネームしました。全ての置き換えはプロジェクトをアップグレードするときに自動的に行われます。

* @@glstate.matrix.mvp@@ は UNITY_MATRIX_MVP
* @@glstate.matrix.modelview[0]@@ は UNITY_MATRIX_MV
* @@glstate.matrix.projection@@ は UNITY_MATRIX_P
* @@glstate.matrix.transpose.modelview[0]@@ は UNITY_MATRIX_T_MV
* @@glstate.matrix.invtrans.modelview[0]@@ は UNITY_MATRIX_IT_MV
* @@glstate.matrix.texture[0]@@ は UNITY_MATRIX_TEXTURE0
* @@glstate.matrix.texture[1]@@ は UNITY_MATRIX_TEXTURE1
* @@glstate.matrix.texture[2]@@ は UNITY_MATRIX_TEXTURE2
* @@glstate.matrix.texture[3]@@ は UNITY_MATRIX_TEXTURE3
* @@glstate.lightmodel.ambient@@ は UNITY_LIGHTMODEL_AMBIENT
* @@glstate.matrix.texture@@ は UNITY_MATRIX_TEXTURE

!!! セマンティック 変更

さらに、 @@SV_POSITION@@ ( @@POSITION@@ の代わりに) セマンティックを、vertex-to-fragment 構造のpositionでは、使用することを推奨します。

!!! より厳密なエラーチェック

プラットフォームによっては、Cg と別のコンパイラによりコンパイルする可能性があり（例えば Windows ではHLSL）、より厳密なエラーチェックをする場合があります。もっとも良くあるケースは:
* 全ての頂点／フラグメント シェーダの入力および出力は "セマンティック" をアサインする必要があります。Unity 2.x ではセマンティックをアサインすることは必須としていませんでした（その場合にTEXCOORDを使用）が、 Unity 3.0 ではセマンティックが必要です。
* 全てのシェーダ出力変数は書き込みされる必要があります。例えば、   @@float4 color : COLOR@@ が頂点シェーダ出力である場合、@@rgb@@ だけ書き込みして alpha を初期化しないということが出来ません。


!! その他の変更

!!! RECT テクスチャの廃止

Unity 2.x では、 [[class-RenderTexture | RenderTexture]] は必ずしも 2 の倍数である必要がなく、"RECT" テクスチャとすることが出来ました。これらはシェーダのプロパティで "RECT" テクスチャ型となり、 @@samplerRECT@@ 、 @@texRECT@@ 等々とCgシェーダで使用されていました。RECTのテクスチャ座標はOpenGLで特別なケースでピクセルとなっていました。その他の全てのプラットフォームでは、テクスチャ座標はその他のテクスチャと同じで、テクスチャが 0.0 から1.0の範囲でした。

Unity 3.0では、このOpenGLの特別なケースを廃止することに決めて、2 の倍数でない RenderTexture を他のプロットフォームと同様に扱うこととしました。推奨としては、 @@samplerRECT@@ 、 @@texRECT@@ および同様のケースは通常の @@sampler2D@@ および @@tex2D@@ を使用して下さい。さらにもし特別なピクセル解決を OpenGL で行っていた場合、それをシェーダから外す必要があり、すなわち OpenGL 以外の部分のみを保持してください。（シェーダの @@SHADER_API_D3D9@@ または @@SHADER_API_OPENGL@@ マクロを探してください）。


