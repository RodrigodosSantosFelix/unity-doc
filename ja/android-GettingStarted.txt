! Androidでの開発を始める

Android OS が実行されているデバイス向けのゲームを開発することは iOS 開発の場合と似たアプローチが必要です。しかし、全てのデバイスに渡って、ハードウェアが標準化されておらず、そしてそのための iOS開発では発生しない問題が出てきます。iOS バージョン同様に UnityのAndroidバージョンには機能的な違いがあります。

!! Android 開発環境をセットアップする
デバイス上でUnityゲームをテストする前にAndroid開発環境をセットアップする必要があります。これは、異なるAndroidプラットフォームでの Android SDKのダウンロードおよびインストール、またシステムに物理デバイスを追加することが含まれます（これは Windows または Mac のどちらで開発しているかによりだいぶ異なります）。このセットアップのプロセスは Android デベロッパー ウェブサイトで説明されていて、デバイスの製造元により追加情報があるかもしれません。これは複雑なプロセスであるため、Androidデバイスまたはエミュレータでコードを実行する前に完了しなければならないタスクを [[android-sdksetup | 基本的な概要]] としてまとめました。しかし [[http://developer.android.com/sdk | Android デベロッパー ポータル]] の説明を説明をステップごとに行うことがベストです。

!! Android機能へのアクセス
Unity Android は様々な入力データおよび設定にアクセスするスクリプティング API を提供しています。利用可能なクラスについては [[Main.android-API | Android スクリプティングページ]] を参照下さい。

!! ネイティブ C、C++、またはJavaコードをスクリプトに公開する
Unity Android により、C／C++で書かれたカスタムの関数を C# スクリプトからコール出来ます。（Java関数は間接的にコール出来ます）ネイティブコードの関数をUnityからアクセスできるようにする方法については [[Main.Plugins#AndroidPlugins | プラグインのページ]] を参照下さい。

!! オクルージョン カリング
Unityはオクルージョン カリングをサポートしていて、これはモバイルプラットフォームにおいて特に価値ある最適化です。詳細については [[OcclusionCulling | オクルージョン カリング]] を参照下さい。

!! スプラッシュスクリーン のカスタマイズ
ゲームが起動される際のスプラッシュスクリーンはカスタマイズすることが出来ます。 - 詳細は [[MobileCustomizeSplashScreen#Android | このページ]] を参照下さい。

!! トラブルシューティングおよびバグレポート
アプリケーションがクラッシュ、または期待通りに動かないことには様々な理由があります。 [[TroubleShooting#AndroidTroubleShooting | Android トラブルシューティング ガイド]] によりバグの根本原因にできるかぎり到達できるようになります。もし、ガイドを見た後に、Unity内部の問題が原因であると判断した場合、バグレポートを提出して下さい - 提出方法の詳細については [[android-bugreporting | このページ]] を参照下さい。

!! Unity AndroidがデスクトップのUnityとどう異なるか
!!! Strong TypeのJavaScript
パフォーマンスの理由から、JavaScriptでのダイナミックタイピングはUnity Androidでは常にオフとなっていて、あたかも #pragma strict が自動的に全てのスクリプトに適用されたかのようになります。これはデスクトッププラットフォーム向けに開発されたプロジェクトに着手する場合は重要なことで、Android に切り替えた途端に想定外のコンパイルエラーが出るかもしれません。ダイナミック タイピングは最初に調べるべきことです。これらのエラーは、全ての変数が明示的にTypeされる、あるいは初期化のときに Type インタフェースであれば通常修正しやすいものです。


!!! 推奨されるテクスチャ圧縮としてのETC
Unity Androidは DXT/PVRTC/ATC テクスチャをサポートするとはいえ、もしこれらの圧縮方法が使用する個別のデバイスでサポートされてない場合は、Unityは実行時にテクスチャを RGB(A) 形式を解凍します。これはGPUのレンダリングスピードに影響があるため、推奨は代わりにETCフォーマットを使用することです。ETCはAndroidでのデファクトスタンダードの圧縮フォーマットであり、Android 2.0 以降のデバイスでは全てサポートされます。しかし、ETCはアルファチャネルをサポートして、またサイズ、品質、レンダリング スピードの組み合わせのトレードオフとしてアルファが必要な場合に、RGBA 16ビットはときどきベストの選択となることがあります。

別のAndroidディストリビューション アーカイブ（.apk）を各々の DXT/PVRTC/ATC 形式ごとに作成することは可能であり、Android マーケットのフィルタリング システムによってデバイスごとに正しいアーカイブを選択させることもできます（ [[ Main.PublishingBuilds#Android | Android向けビルドをパブリッシュ ]] を参照下さい）。

!!! ムービー プレイバック
ムービー テクスチャはAndroidがサポートされていませんが、フルスクリーン でのストリーミング プレイバックはスクリプティング関数により提供されます。サポートされるファイル形式およびスクリプティングAPI の詳細については [[Main.VideoFiles | ムービーのページ]] または [[ http://developer.android.com/guide/appendix/media-formats.html | Android がサポートするメディア形式のページ]] を参照下さい。

!!!上級者向け
(:tocportion:)
