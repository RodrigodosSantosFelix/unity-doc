! ShaderLab文法：Culling & Depth Testing

Attach:SL./PipelineCullDepth.png

カリングは、視点と反対側に向いたポリゴンをレンダリングしない、最適化です。全てのポリゴンは表と裏側があります。カリングは、オブジェクトのほとんどのが閉じている事実を利用します、もしキューブがあった場合、視点と反対側を見ることはない（必ず視点の側を向いている面がある）ので、反対側の面は描画する必要がありません。このためバックフェース　カリング（反対側の面の除去）と名づけられてます。

レンダリングを正しく見せるもうひとつの機能はデプス　テスト（Depth testing）です。デプス　テストにより、シーンの中で最も近いオブジェクト表面のみ描画されることをチェックします。

!! 文法
:__Cull__ Back | Front | Off: ポリゴンのどちら側をカリングする（描画しない）か制御。
-->__Back__ 視点と反対側のポリゴンをレンダリングしない ''(デフォルト)''.
-->__Front__ 視点と同じ側のポリゴンをレンダリングしない。オブジェクトを反転するのに使用します。
-->__Off__ カリングを無効にして、全ての面を描画します。特殊なエフェクトで使用します。
:__ZWrite__ On | Off: このオブジェクトのピクセルをデプスバッファに書き込みするか制御（デフォルトは''On'' ）。もし不透明なオブジェクトを描画する場合、オンにします。もし部分的に透過のエフェクトを描く場合、''ZWrite Off''に切り替えます。詳細については以下を参照下さい。
:__ZTest__ Less | Greater | LEqual | GEqual | Equal | NotEqual | Always: デプステストの実行方法。デフォルトは''LEqual'' （すでに描画されているオブジェクトと距離が等しいか、より近い場合に描画します、それより遠い場合はオブジェクトで隠します）
:__Offset__ ''Factor'' __,__ ''Units'': デプスオフセットを二つのパラメータ、''factor'' および ''units''、で指定できるようにします。''Factor'' scales the maximum Z slope, with respect to X or Y of the polygon, and ''units'' scale the minimum resolvable depth buffer value. ''Factor''は、ポリゴンのXあるいはYに関連して、最大のZ勾配をスケールし、''units''は最小のデプスバッファ値をスケールします。For example ''Offset 0, -1'' pulls the polygon closer to the camera ignoring the polygon's slope, whereas ''Offset -1, -1'' will pull the polygon even closer when looking at a grazing angle. 例えば、''Offset 0, -1''により、ポリゴンの勾配を無視してポリゴンをカメラに近づけ、一方で''Offset -1, -1''はさらに見上げる角度でポリゴンを近づけます。


!! 例

オブジェクトの反対側の面のみレンダリングします：

[@Shader "Show Insides" {
    SubShader {
        Pass {
            Material {
                Diffuse (1,1,1,1)
            }
            Lighting On
            Cull Front
        }
    }
} @]

キューブで適用してみて、周回したときに形状に違和感を感じることに気付いて下さい。これはキューブの内部しか見ていないためです。


!!! デプス書き込みありの透過シェーダ

通常[[shader-TransparentFamily | semitransparent shaders]] （部分的に透過なシェーダ）はデプスバッファに書き込みしません。しかしこれにより、特に複雑でConvex（非凸）のメッシュでは、描画順の問題が生まれる可能性があります。もしそのようなメッシュをフェードイン・フェードアウトした場合、透過をレンダリングする前に、デプスバッファを埋めるシェーダを使用するのが役立ちます。

Attach:TransparentDiffuseZWrite.png \\
''部分的に透過なオブジェクトで、左：標準的なTransparent/Diffuseシェーダ、右：デプスバッファに書き込みするシェーダ''

[@
Shader "Transparent/Diffuse ZWrite" {
Properties {
    _Color ("Main Color", Color) = (1,1,1,1)
    _MainTex ("Base (RGB) Trans (A)", 2D) = "white" {}
}
SubShader {
    Tags {"Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent"}
    LOD 200

    // デプスバッファのみにレンダリングする追加のパス
    Pass {
        ZWrite On
        ColorMask 0
    }

    // forward renderingパスをTransparent/Diffuseから渡します
    UsePass "Transparent/Diffuse/FORWARD"
}
Fallback "Transparent/VertexLit"
}
@]


!!! 法線のデバッグ

次はより興味深い内容で、最初にオブジェクトを法線マップ頂点ライティングでレンダリングした後、次にバックフェースを明るいピンクでレンダリングします。This has the effects of highlighting anywhere your normals need to be flipped. If you see physically-controlled objects getting 'sucked in' by any meshes, try to assign this shader to them. If any pink parts are visible, these parts will pull in anything unfortunate enough to touch it. これにより法線が反転しないといけないところがハイライトされる効果が得られます。物理挙動で制御されたオブジェクトがどれかのメッシュにより'吸い込まれる' 現象がある場合、このシェーダを割り当てて下さい。もしピンクの部分が見える場合、これらの部分がそれに触れる部分を残念ながら引っ張り込んでしまいます。

実際にやってみます：

[@Shader "Reveal Backfaces" {
    Properties {
        _MainTex ("Base (RGB)", 2D) = "white" { }
    }
    SubShader {
        // オブジェクトの視点と同じ側をレンダリングします。
        // シンプルな白いマテリアルを使用して、メインのテクスチャを適用します。
        Pass {
            Material {
                Diffuse (1,1,1,1)
            }
            Lighting On
            SetTexture [_MainTex] {
                Combine Primary * Texture
            }
        }

        // 次に視点と逆側の三角形を、この世でもっとも
        // わずらわしい、明るいピンク色でレンダリングします。
        Pass {
            Color (1,0,1,1)
            Cull Front
        }
    }
} @]


!!! グラス　カリング
カリングの制御はバックフェース以外でも便利です。もし透過オブジェクトがある場合、しばしばオブジェクトのバックフェースを表示した場合があります。もしカリング一切なしでレンダリングした場合(__Cull Off__ )、いくつか裏面が表面と重なってしまうことがよくあります。

次の例は、凸なオブジェクト（球、キューブ、車のフロントガラス）で使用できる、シンプルなシェーダです。


[@Shader "Simple Glass" {
    Properties {
        _Color ("Main Color", Color) = (1,1,1,0)
        _SpecColor ("Spec Color", Color) = (1,1,1,1)
        _Emission ("Emmisive Color", Color) = (0,0,0,0)
        _Shininess ("Shininess", Range (0.01, 1)) = 0.7
        _MainTex ("Base (RGB)", 2D) = "white" { }
    }

    SubShader {
        // サブシェーダにて定義することにより、マテリアルを複数のパスで使用します。
        // ここで定義された値は、その他で含むパスでのデフォルト値になります。
        Material {
            Diffuse [_Color]
            Ambient [_Color]
            Shininess [_Shininess]
            Specular [_SpecColor]
            Emission [_Emission]
        }
        Lighting On
        SeparateSpecular On

        // アルファブレンディングを設定します。
        Blend SrcAlpha OneMinusSrcAlpha

        // オブジェクトの視点と反対側をレンダリングします。
        // もし凸オブジェクトの場合、これらは表面よりも
        // 常に遠くになります。
        Pass {
            Cull Front
            SetTexture [_MainTex] {
                Combine Primary * Texture
            }
        }
        // オブジェクトの視点と同じ側の部分をレンダリングします。
        // 凸オブジェクトの場合、これらは
        // 裏面よりも近くになります。
        Pass {
            Cull Back
            SetTexture [_MainTex] {
                Combine Primary * Texture
            }
        }
    }
} @]
