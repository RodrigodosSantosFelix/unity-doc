!Unity Project での Mono DLL 使用 / Using Mono DLLs in a Unity Project

通常、スクリプトはプロジェクトにソースファイルとして保持され、ソースが変更されたときにUnity によりコンパイルされます。しかし外部コンパイラを用いてスクリプトを__ダイナミック リンク ライブラリ__ (DLL) としてコンパイルすることも出来ます。結果の DLL は次にプロジェクトに追加して、それに含まれるクラスは通常のスクリプトと同様にオブジェクトにアタッチできます。

一般的にDLLよりもスクリプトで作業をしたほうが簡単です。しかし、DLL 形式で提供された サードパーティ製 Mono コードをアクセスしないといけない場合があります。自身のコードを開発するとき、Unity によりサポートされないコンパイラを使用できる場合があり（例えば F#）、コードを DLL としてコンパイルし Unity プロジェクトに追加することが出来ます。さらに、ソースコードを提供することなくUnity コードを提供したい場合があり（例えば Asset Store プロダクトなど）、その場合に DLL はこれを実現する簡単な方法です。


!! DLL の作成

DLL を作成するには、最初に適切なコンパイラが必要です。.NETコードを生成する全てのコンパイラは Unity で動作することが保証されていないため、大量の作業に着手する前にコンパイラを何らかのコードでテストしておくことが賢明です。もし DLL がUnity APIに依存するコードが何もない場合、適切なコンパイラ オプションを使用してシンプルに DLL とすることができます。もし Unity API が使用したい場合、 Unity 自身の DLL をコンパイラで利用可能とする必要があります。 Mac ではこれらはアプリケーション バンドルに含まれます（コンテキストメニューからShow Package Contentsコマンドを使用することでバンドルの内部構造が見れます。Unity アプリケーションを右クリックまたは Ctrl を押しながらクリックします）:-

Unity DLL へのパスは通常、

	/Applications/Unity/Unity.app/Contents/Frameworks/Managed/

...であり、2 つの DLL は UnityEngine.dll および UnityEditor.dll と名前がついています。

Windows では、DLL は Unity アプリケーションについてきたフォルダにあります。パスは通常

	C:\Program Files\Unity\Editor\Data\Managed\

...であり、DLL のファイル名は Mac OS 向けと同じです。

DLL をコンパイルするときの正確なオプションは使用されるコンパイラにより幅があります。例えば Mono C# コンパイラ、すなわち __mcs__、のコマンドラインは Mac OS では次のように見えます:-

	mcs -r:/Applications/Unity/Unity.app/Contents/Frameworks/Managed/UnityEngine.dll -target:library ClassesForDLL.cs 

ここで、''-r'' オプションはビルドに含めるべきライブラリへのパスを指定し、この場合は UnityEngine ライブラリです。 ''-target'' オプションによりどのビルドが必要であるか指定し、 "library" という文字列は DLL ビルドを選択するために用いられています。最後に、コンパイルするソースファイルは ''ClassesForDLL.cs'' です（このファイルがカレントの作業フォルダにあることが前提ですが、必要であればファイルをフルパス指定できます）。全てがうまく行く前提で、結果の DLL ファイルはソースフォルダと同じ場所に表示さます。

!!DLL の使用

一回コンパイルされた後、DLL は他の全てのアセットと同様に、Unity プロジェクトにドラッグ＆ドロップできます。DLL アセットにはたたまれた 三角形マーク があり、ライブラリの中の別クラスを明らかにします。MonoBehaviour から得られるクラスは通常のスクリプトと同様にゲームオブジェクト上にドラッグ＆ドロップできます。非MonoBehaviour クラスは他のスクリプトから通常の方法で直接使用できます。 

Attach:DLLScreenshot.png\\
''クラス名が表示されている、展開された DLL''
