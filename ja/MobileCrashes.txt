! クラッシュCrashes

!!クラッシュ時のチェックリスト

* コード ストリッピングを無効化（また iOS では "slow with exceptions" をセット）
* iOS プレイヤーのビルドに関するビルド サイズ最適化の手順に従い (http://docs.unity3d.com/Documentation/Manual/iphone-playerSizeOptimization.html) 、iOS のストリッピングによりクラッシュさせない
* メモリ不足が原因でないことを確認（デバイスを再起動、そのプラットフォームで最大量のRAMを使用するようにして、ログを観察）

!! Editor.log - エディタ上の場合

デバッグ メッセージ、警告、およびエラーは全てコンソールに出力されます。またUnityはステータスレポート、すなわちアセットのロード、Mono 初期化、グラフィックス ドライバ情報など、をコンソールに出力します。

何が起きているかを理解したい場合は editor.log を確認することです。ここではコンソールによる部分的な情報ではなく、全体像をつかむことが出来ます。何が起きているかを理解し、またコーディング セッションの完全なログを観察できます。何によって Unity がクラッシュしたのか、アセットにどういう問題があったのか追跡することができます。

Unityはデバイス上にもいくつかの情報を出力します。 Android では logcat コンソール、iOS では Xcode gdb コンソールに出力します。

!Android!
>>android<<
!! Android でデバッグ

# ''DDMS または ''ADB'' ツールを使用
# スタックトレースを観察（Android 3 以上）。''c++filt'' (''ndk'' の一部) または別の方法、すなわち:  http://slush.warosu.org/c++filtjs  、のいずれかを使用して、マネージド 関数コールをデコード
# クラッシュが発生した ''.so'' ファイルをチェック:
##''libunity.so'' - クラッシュが Unity コードまたはユーザコードいずれかで発生
##''libdvm.so'' - クラッシュが Java コード、 Dalvik のどこか、で発生。 Dalvik スタックトレースをみつけ、JNI コードまたは Java関連を再確認（ ''AndroidManifest.xml'' に加えたかもしれない場合を含め）。
##''libmono.so'' - Mono のバグか、または Mono が強く嫌うことをしているかもしれない
# もしクラッシュ ログで分からない場合、逆アセンブルして何が起きたか大体分かるようにする
## Android NDK の ARM EABI ツールを次のように使用: ''objdump.exe -S libmono.so >> out.txt''
## スタックトレースから PC 周りのコードをチェック
## 問題ない場合の ''out.txt'' とコードを比較
## 上にスクロールして、問題発生した関数で何が起きているか確認

>><<

!iOS!
>>ios<<
!! iOS でデバッグ

# Xcode はビルトインのツールがある。 Xcode 4 はクラッシュのデバッグに優れたツールがあり、Xcode 3 はやや少ない
# 完全な gdb スタック - thread apply all bt
# soft-null-check を有効化:
Development ビルドおよび Script Debugging を有効化します。これで catch できなかった null ref 例外が Xcode コンソールに、適切なマネージド コールスタック とともに、出力されます。
# "fast script call" および コード ストリッピング を無効化。ランダムなクラッシュ、すなわち稀な ''.Net'' 関数または reflectionによるも、を防止するかもしれない


>><<

!! 考え方

# どのスクリプトでクラッシュが起きたかを見つけて、デバイス上で Mono Develop を使用してデバッグ
# もしクラッシュの原因が コード でない場合、スタック トレース をより詳細に観察して何が起きたかのヒントを得る。コピーをとったうえでクラッシュレポートを提出して、解析を依頼
