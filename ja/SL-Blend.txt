! ShaderLab文法：Blending / ShaderLab syntax: Blending

Blendingは透過のカラー作成に使用します。

Attach:SL./PipelineBlend.png

グラフィックスがレンダリングされて、さらに全てのシェーダが実行されて、全てのテクスチャが適用されると、画面にピクセルが描画されます。すでに存在しているピクセルに対して、どのように合成するかはブレンディングで制御されます。

!! 文法

:Blend Off: ブレンディングを無効にします。
:Blend ''SrcFactor'' ''DstFactor'': ブレンディングを有効にして、設定をします。生成されたカラーは__SrcFactor__ に乗算されます。画面にすでにあるカラーは__DstFactor__ を乗算して、2つを合成します。
:Blend ''SrcFactor'' ''DstFactor'', ''SrcFactorA'' ''DstFactorA'': 上記と同様ですが、アルファチャネルをブレンディングするのに、異なる要素を使用します。
:BlendOp ''Min | Max | Sub | RevSub'': ブレンディングされたカラーを使用する代わりに別の処理を行います。


!! プロパティ

次の全てのプロパティはSrcFactor およびDstFactorともに有効です。 __Source__ は計算されたカラーを示し、__Destination__ は画面にすでにあるカラーです。


||__One__ ||Oneの値 - これでSourceあるいはDestinationのカラーをそのまま使用したい場合に使用します。||
||__Zero__ ||Zeroの値 - これでSourceあるいはDestinationのカラーを消去したい場合に使用します。||
||__SrcColor__ ||このステージの値はSource Colorの値を乗算します。||
||__SrcAlpha__ ||このステージの値はSource Alphaの値を乗算します。||
||__DstColor__ ||このステージの値はフレームバッファのSource Color ||
||__DstAlpha__ ||このステージの値はフレームバッファのSource Alphaの値を乗算します。||
||__OneMinusSrcColor__ ||このステージの値はフレームバッファの(1 - Source Color)を乗算します。 ||
||__OneMinusSrcAlpha__ ||このステージの値はフレームバッファの(1 - Source Alpha)を乗算します。 ||
||__OneMinusDstColor__ ||このステージの値はフレームバッファの(1 - Destination Color)を乗算します。 ||
||__OneMinusDstAlpha__ ||このステージの値はフレームバッファの(1 - Destination Alpha)を乗算します。 ||


!! 詳細

次がもっとも一般的なプレンディングのタイプです：

[@
Blend SrcAlpha OneMinusSrcAlpha     // Alpha blending
Blend One One                       // Additive
Blend OneMinusDstColor One          // Soft Additive
Blend DstColor Zero                 // Multiplicative
Blend DstColor SrcColor             // 2x Multiplicative
@]

!! 例
次は簡潔な例のシェーダで、画面にすでにあるものに、テクスチャを加えます。

[@Shader "Simple Additive" {
    Properties {
        _MainTex ("Texture to blend", 2D) = "black" {}
    }
    SubShader {
        Tags { "Queue" = "Transparent" }
        Pass {
            Blend One One
            SetTexture [_MainTex] { combine texture }
        }
    }
}@]

さらに複雑な例、グラスです。これは2パスのシェーダとなります：
# 最初のパスで、照らされてアルファブレンディングされたテクスチャを画面にレンダリングします。アルファチャネルで透過性を決定します。
# 2つめのパスで、アルファブレンディングされたウィンドウの上に、Additiveの透過性を使用して、反射キューブマップをレンダリングします。

[@Shader "Glass" {
    Properties {
        _Color ("Main Color", Color) = (1,1,1,1)
        _MainTex ("Base (RGB) Transparency (A)", 2D) = "white" {}
        _Reflections ("Base (RGB) Gloss (A)", Cube) = "skybox" { TexGen CubeReflect }
    }
    SubShader {
        Tags { "Queue" = "Transparent" }
        Pass {
            Blend SrcAlpha OneMinusSrcAlpha
            Material {
                Diffuse [_Color]
            }
            Lighting On
            SetTexture [_MainTex] {
                combine texture * primary double, texture * primary
            }
        }
        Pass {
            Blend One One
            Material {
                Diffuse [_Color]
            }
            Lighting On
            SetTexture [_Reflections] {
                combine texture
                Matrix [_Reflection]
            }
        }
    }
} @]
