フォント

$$Font$$ [[class-GuiText|GUI Text]] または [[class-TextMesh|Text Mesh]] $$Component$$ のいずれかで使用するするに、作成またはインポートできます。


!! True Type Font ファイル (.ttf) のインポート

プロジェクトにフォントを追加するには、Assets フォルダに __.ttf__ ファイルを置く必要があります。 Unity が、自動的にフォントをインポートします。 そのフォントに拡張子 __.ttf__ があるか確認してください。ない場合、Unity はフォントを認識しません。

フォントの「サイズ」を変更するには、$$Project View$$ で強調表示すると、$$Inspector$$ の $$Import Settings$$ に多くのオプションが表示されます。

Attach:font_importer.png\\
「フォント用のインポート設定」

||PROPS
||``Font Size``  ||ワード プロセッサに設定されたサイズに基づいた、フォントのサイズ。 ||
||``Character`` ||フォントのテキスト エンコーディング  ここでは、フォントを大文字または小文字のみで表示させることができます。 ||
||               ||このモードを Dynamic に設定すると、ユーティリティがOS の基本フォント レンダリング ルーチンを使用するようになります （下記参照）。||
||``2.x font placing`` ||Unity 3.x が、2.x よりも、印刷的により正しいフォントの縦配置を使用します。  フォント テクスチャをレンダリングする際に計算する代わりに、True Type フォントに保存されたフォント アセントを使用します。  このプロパティにチェックを入れると、2.x の縦配置が使用されます。 ||

「非 Dynamic フォントに固有のインポート設定」
||PROPS
||``Font Rendering``	||フォントに適用されるアンチエイリアス処理の量。||

「Dynamic フォントに固有のインポート設定」
||PROPS
||``Style``      ||フォントに適用されるスタイルで、通常、太字、斜体、太字と斜体のいずれか。 ||
||``Include Font Data`` ||Dynamic フォント プロパティと併用される際に、この設定がフォントのパッケージングを制御します。  選択すると、TTF がビルドの出力に含まれます。  選択しないと、エンド ユーザーがマシンにインストール済みのフォントを持っているとみなされます。  フォントは著作権の対象となるため、使用許諾を受けたフォントか、自身で作成してフォントのみ使用してください。 ||
||``Font Names`` ||[Include Font Data] を選択していない場合にのみ使用できます。  コンマで区切られた、フォント名のリストが表示されます。  これらのフォントは、左から右へと順に試行され、ゲーマー マシンで最初に検出されたフォントが使用されます。  ||

フォントをインポート後に、プロジェクト ビューでそのフォントを展開し、自動生成されたアセットがあるかを確認できます。  次の2 つのアセットはインポート中に作成されます。 「フォント マテリアル」と「フォント テクスチャ」

!! Dynamic フォント

Unity 3.0 は、Dynamic フォントのレンダリングのサポートを追加します。 インポート設定の「Characters」ドロップダウンリストを「Dynamic」に設定すると、Unity はすべてのフォント キャラクターを持つテクスチャを事前に生成しません。 代わりに、OS に組み込まれたフォント レンダリングを使用して、オン ザ フライでテクスチャを作成します。 これには、特にユーザーシステムに一般に含まれるフォントの使用しているために、フォント データを含める必要がない場合やアジア言語や大きいフォント サイズ （通常のフォント テクスチャを使用するので、フォント テクスチャが非常に大きくなる）をサポートする必要がある場合に、ダウンロードのサイズやテクスチャ メモリに保存できるという利点があります。 

!! Unicode サポート
Unity はUnicode を完全にサポートしています。 Unicode のテキストにより、通常 ASCII 文字セットでサポートされていないドイツ語、フランス語、デンマーク語、日本語の文字を表示することができます。 また、フォントがサポートしている場合に、矢印やオプション キーなどの多くの異なる特殊用途文字を入力することができます。

Unicode 文字を使用するには、インポート設定の「Characters」ドロップダウンから「Unicode」か「Dynamic」のいずれかを選択します。  このフォントで Unicode 文字を表示できます。  $$GUIText$$ または $$Text Mesh$$ を使用している場合、インスペクタにあるコンポーネントの「Text」フィールドに Unicode 文字を入力できます。  Mac 上のインスペクタでは、Unicode 文字が正しく表示されない場合があります。

また、スクリプトから表示されるテキストを設定したい場合、Unicode 文字も使用できます。  Javascript と C# コンパイラは、Unicode ベースのスクリプトを完全にサポートしています。 UTF-16 エンコーディングでスクリプトを保存するだけでかまいません。  $$Unitron$$ で、^^Text->Text Encoding->Unicode (UTF 16)^^　を選択することで、この操作を行うことができます。  Unicode 文字をスクリプトの文字列に追加すると、$$UnityGUI$$ や、GUI テキスト、またはテキスト メッシュで期待されるように表示されます。  $$UniSciTE$$ がスクリプト の編集に使用される PC で、UCS-2 Little Endian エンコーディングを使用して、スクリプトを保存します。


!! フォント カラーの変更

フォントの使用方法に応じて、表示フォントの色を変更する方法がいくつかあります。


!!! GUI テキストとテキスト メッシュ

GUI　テキストまたはテキスト メッシュを使用して、フォントに対してカスタムの $$Material$$ を使用して、その色を変更できます。 プロジェクト ビューで、^^Create->Material^^ をクリックし、$$Inspector$$ で新規作成したマテリアルを選択および設定します。 フォント アセットからそのマテリアルにテクスチャを割り当ててください。 フォント マテリアルに組み込みの「GUI/Text Shader」シェーダーを使用することで、マテリアルの「テキスト カラー」で色を選択できます。

!!! UnityGUI

UnityGUI スクリプティングを使用して、フォントする場合、異なる環境で、フォントの色をより制御できます。  フォントの色を変更するには、^^Assets->Create->GUI Skin^^ から $$GUISkin$$ を作成し、^^Label->Normal->Text Color^^ などから、特定の制御状態に色を定義します。  詳細については、[[class-GUISkin | GUI Skin page]] を参照してください。

!!ヒント
* インポートされたフォントｗを表示するには、フォントを選択し、^^GameObject->Create Other->3D Text^^ を選択します。
* 小文字または大文字のみ使用することで、生成されたテクスチャ サイズが小さくなります。
* Unity が提供するデフォルトのフォントは、Arial になります。  このフォントは、常に使用可能で、プロジェクト ビューには表示されません。
