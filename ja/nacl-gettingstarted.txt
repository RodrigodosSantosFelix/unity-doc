! ネイティブ クライアント開発を始める

ネイティブ クライアント（以下、''NaCl'' ）は Google の新しいテクノロジーでありネイティブ実行コードをウェブページい埋め込み、非常にパフォーマンスの高いウェブアプリをプラグインのインストールを必要とせずにデプロイできます。現在 NaCl はWindows, Mac OS X および Linux （Chrome OSサポートを有効にした状態）の Google Chrome でのみサポートされていますが、テクノロジーはオープンソースであるため、将来的に他のブラウザプラットフォームにポートすることが出来ます。

Unity 3.5 では NaCl で Unity Web Player コンテンツ(.unity3d ファイル)を実行して、Chrome でプラグイン インストールなしにコンテンツ実行できることをサポートしています。これはまだ評価版です - 安定して使用できますが、 NaCl は進化が早いプラットフォームであるため、Unity Web Player でサポートされている全ての機能をサポートしませんしブラウザ プラグインで出来ることを全てサポートしていません。

!! NaCl でのゲームのビルドおよびテスト

NaCl でのゲームのビルドおよびテストは非常に簡単です。Google Chrome のインストールが必要です。単に "Web Player" を Build Settings で選択肢、 "Enable NaCl" チェックボックスをチェックします。これにより生成された unity3d ファイルが Nacl で実行できることを確認し（NaCl で必要な GLSL ESシェーダ を含め、NaCl でサポートされていないダイナミック フォントを無効化して）、そして NaCl ランタイム および HTML ファイル をインストールして NaCl ゲームを起動します。もしビルドをして実行すると、 Unity はプレイヤーを Chrome のアプリとしてインストールし、自動的に起動します。

!! NaCl でのゲームの出荷

現状では、 NaCl は デフォルトでChrome での汎用的なウェブ向けに有効化されていません。NaCl プレイヤーをどのようなウェブページに埋め込みできて、そしてユーザにより手動で chrome://flags から有効化するように促すことが出来る一方で、現在 NaCl ゲームを出荷して難しい設定なしで動作させるためには [[https://chrome.google.com/webstore|Chrome Web Store]] にデプロイすることです（ここではNaCl がデフォルトで有効）。Chrome Web Store は比較的制限がなく、また自身のウェブサイトのコンテンツをホストすることが許容されている、または自身の希望する支払い処理システムを使用していることに留意して下さい。予定としてはこの制限は Google が新しいテクノロジーであるポータブル ネイティブ クライアント（PNaCl）を完了したときに取り除かれ、このテクノロジーでは実行ファイルを LLVM ビットコードとして出荷でき、したがって Nacl アプリを 全てのCPU アーキテクチャとは独立して動作できるようになります。次に NaCl は任意のウェブサイトで有効化されるはずです。

!!! ビルドサイズに関する補足

NaCl ビルドを作成するとき、 ''unity_nacl_files_3.x.x'' が非常に大きく、 100 MB を超えることに多分気付きます。NaCl コンテンツの実行をするたびに、このデータがダウンロードされる必要があるかというと、一般的には違います。アプリをChrome Web Storeで供給するには2つの方法があり、ホストされたアプリかパッケージされたアプリか、のいずれかです。もしコンテンツをパッケージされたアプリとして供給する場合、全てのデータはインストール時に圧縮アーカイブとしてダウンロードされ、次にユーザのハードディスク上に格納されます。もしコンテンツをホストされたアプリとして供給する場合、データはウェブから毎回ダウンロードされます。しかし、NaCl ランタイムは関連するアーキテクチャのみを ''unity_nacl_files_3.x.x'' フォルダからダウンロード（i686 または x86_64）してウェブサーバが正しく設定されていれば、データは送信時に圧縮され、実際の送信データは 10MB ぐらいになります（Physics Stripping が使用されている場合はより少なくなります）。 ''unity_nacl_files_3.x.x'' フォルダは ''.htaccess'' ファイルを含み、 データを送信時に圧縮するように Apache を設定します。もし異なるウェブサーバを使用している場合、これを自身で設定する必要があるかもしれません。

!! NaCl の制約事項

NaCl は通常の Unity Web Player の全ての機能をまだサポートしていません。これらの多くのサポートは Chrome および Unity の将来バージョンで予定されています。現在、 NaCl では次の機能がサポートされていません:

* Webcam テクスチャ
* ジョイスティック入力
* キャッシング
* Substance
* ダイナミック フォント
* WWWクラスを除いた全てのネットワーキング
* エディタへのネットワーク接続が必要であるため、プロファイラ は動作しません。
* 標準の Webplayer プラグインについては、ネイティブ C/C++ プラグインは現在 NaCl によりサポートされていません。

次の機能はサポートされていますが、いくつかの制限があります:

* デプス テクスチャ:
-> デプス テクスチャ は リアルタイム シャドウ および他のエフェクトで必要です。デプス テクスチャは Unity NaCl でサポートされていますが、 Chrome の OpenGL ES 2.0 実装は Windows で必要な拡張機能をサポートしていないため、デプステクスチャは OS X および Linux でのみ動作します。

* 他のグラフィックス機能:
->NaCl は OpenGL ES 2.0 を使用し、通常の OpenGL に含まれる拡張機能の全てをサポートしません。これはつまりいくつかの拡張機能に依存する機能、例えば リニア および HDR ライティングは現在 NaCl で動作しません。さらにシェーダは GLSL シェーダとしてコンパイルされる必要があります。現在、全てのビルトイン シェーダがこれをサポートしておらず、例えば、 スクリーン スペース アンビエント オクルージョン は GLSL でサポートされていません。

* カーソル ロック:
->カーソル ロックはサポートされていますが、フルスクリーン モードのみの場合です。ウィンドウ モードでのカーソル ロックは将来の Chrome リリースで予定されてます。

* NullReference例外:
-> NaCl はハードウェアの例外ハンドリングをサポートしていません。つまりスクリプティングでの NullReference 例外は NaCl でクラッシュします。しかし @@softexceptions="1"@@ を埋め込みパラメータに渡すことが出来て（Unity により Development プレイヤー をビルドするときは自動的にセットされる）、これにより Mono に対してNull参照 をソフトウェアで実施し、結果的にスクリプト実行が遅くなりその代わりにクラッシュはしません。

Google は NaCl に対するシステム要件について、 Mac OS X 10.6.7が必要ということ以外に条件がない一方で、古いシステムでは正しく動作しない場合があることをわれわれは発見しています - 特にこれらのシステムが古い GPU や グラフィックス ドライバーがある場合や積まれているメインメモリーが少ない場合などです。もし古いハードウェアをターゲットとする必要がある場合、 Web Player のほうが良い体験を得られることに気付くかもしれません。

!! フルスクリーン モード:

フルスクリーン モードは Screen.fullScreen をセットすることによりサポートされますが、 ユーザがマウスボタンを離したフレームでしかフルスクリーン モードに入ることが出来ません。NaCl は実際にはハードウェア画面の解像度を変更せず、このため Screen.resolutions はつねに現在のデスクトップ解像度を返します。しかし、 Chrome はより小さいバックバッファへのレンダリングをサポートしていて、画面転送するときに拡大縮小を行います。このため、デスクトップ解像度より小さい解像度をリクエストすることはフルスクリーンモードで一般的にサポートされていますが、スクリーンモードの変更ではなくGPU ベースのスケーリングとなります。

!! WWW クラス:

WWW クラスは NaCl でサポートされていますが、Unity Web Playerと異なるセキュリティポリシーに従います。Unity Web Player が [[Security Sandbox|crossdomain.xml]] ポリシーファイルを使用する一方で、 Flash と同様に、 Unity NaCl は [[http://www.w3.org/TR/cors/|ここ]] に記載されている、NaCl が従うcross-origin セキュリティモデル に従う必要があります。基本的に、プレイヤーがホストされているのと異なるドメインでHTML ドキュメントをアクセスするためには、ウェブサーバを設定して リクエストに対して @@Access-Control-Allow-Origin@@ 応答ヘッダ を送信して、ドメインにプレイヤーホストすることを許可させる必要があります。

!! NaCl でブラウザ Javascript と通信する

JavaScriptを使ってウェブページと通信することはサポートされていて、 [[Unity Web Player and browser communication|Unity Web Player を使用する]] 場合と非常に似ています。 NaCl モジュールを通過する必要があるため Unity から HTML Javascript へのメッセージ送信の構文が異なります。デフォルトの Unity により生成された HTML を使用している場合、次のコードが動作します:
  
  @@document.getElementById('UnityEmbed').postMessage("GameObject.Message(parameter)");@@
  
ブラウザ Javascript コードをNacl から呼び出しするためには、Application.ExternalCall または Application.ExternalEval を コール出来ます。しかし、 Google は Chrom アプリの Eval 機能のサポートをやめており、このため Chrome Web ストアにパブリッシュする際に正しく動作しません。これを回避するためには、Application.ExternalEval を使用して文字列を送信して、 unity_nacl.js の moduleMessage メソッドで 取得するか、または [[http://developer.chrome.com/apps/sandboxingEval.html|ここ]] で説明されているようにコンテンツのサンドボックス設定をセットアップするか、のいずれかの方法をとることが出来ます。

!! ロギング

NaCl はユーザアイルシステムへのアクセスを許可しないため、ログファイルを書き込みしません。その代わりにすべてのロギングを stdout に出力します。NaClからプレイヤーログを見るためには:

* エディタで一回ビルドおよび実行を行い、ゲームが Chrome でアプリとしてインストールされていることを確認します。
* Mac OS X 上で、ターミナルから Chrome を開始し、アイコンをクリックすることでアプリを開始します。ターミナルで Unity player ログ出力が見られます。
* Windows上で同じですが、 NACL_EXE_STDOUT および NACL_EXE_STDERR 環境変数をセットする必要があり、Chrome を --no-sandbox オプションで開始する必要があります。Google の [[https://sites.google.com/a/chromium.org/dev/nativeclient/how-tos/debuggingtips|ドキュメント]] を参照下さい。
