! .NET API 2.0 互換性レベルの使用
[[#iOS]]
!iOS!
>>ios<<
Unity iOS は現在二種類の .NET API 互換性レベルをサポートします: .NET 2.0 および .NET 2.0 サブセットです。 [[class-PlayerSettings40 | Player Settings]] で適切なレベルを設定出来ます。

!! .NET API 2.0
Unityは``.NET 2.0`` API プロファイルをサポートします。これはフル .NET 2.0 API に近いものであり既存の .NETコードと最も互換性があります。しかしアプリケーションのビルドサイズとスタートアップ時間の長さは比較的良くありません。

__注意:__ Unity iOS はスクリプトでの名前空間をサポートしていません。もしサードパーティライブラリがソースコードとして提供されている場合にベストのアプローチはUnity外のDLLとしてコンパイルしてDLLファイルをプロジェクトのAssetsフォルダにドラッグ＆ドロップすることです。

!!  .NET 2.0 サブセット

Unityは``.NET 2.0サブセット`` API プロファイルもサポートします。これはMonoの "monotouch" プロファイルに近いもので "monotouch"  の制約が全てUnityの  .NET 2.0 サブセットに適用されます。 "monotouch"  プロファイルの制約については [[http://monotouch.net/Documentation/Limitations|ここ]] を参照下さい。このプロファイルを使用するメリットはビルドサイズ（スタートアップ時間）の節約ですが、その代わりに既存の .NET コードとの互換性を失います。

>><<
[[#Android]]
!Android!
>>android<<
Unity Android は現在二種類の .NET API 互換性レベルをサポートします: .NET 2.0 および .NET 2.0 サブセットです。[[class-PlayerSettings40 | Player Settings]] で適切なレベルを設定出来ます。

!! .NET API 2.0
Unityは``.NET 2.0`` API プロファイルもサポートします。これはフル .NET 2.0 API に近いものであり既存の .NETコードと最も互換性があります。しかしアプリケーションのビルドサイズとスタートアップ時間の長さは比較的良くありません。

__注意:__ Unity Androidはスクリプトでの名前空間をサポートしていません。もしサードパーティライブラリがソースコードとして提供されている場合にベストのアプローチはUnity外のDLLとしてコンパイルしてDLLファイルをプロジェクトのAssetsフォルダにドラッグ＆ドロップすることです。

!! .NET 2.0 サブセット

 Unityは``.NET 2.0サブセット`` API プロファイルもサポートします。これはMonoの "monotouch" プロファイルに近いもので "monotouch"  の制約が全てUnityの  .NET 2.0 サブセットに適用されます。 "monotouch"  プロファイルの制約については [[http://monotouch.net/Documentation/Limitations|ここ]] を参照下さい。このプロファイルを使用するメリットはビルドサイズ（スタートアップ時間）の節約ですが、その代わりに既存の .NET コードとの互換性を失います。
>><<
