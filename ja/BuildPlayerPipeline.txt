! ビルド プレイヤー パイプライン / Build Player Pipeline

プレイヤーをビルドするとき、ビルドされたプレイヤーを何らか修正したい場合があります。例えばカスタムアイコンの追加、プレイヤーの隣にドキュメントをコピーしたり、またはインストーラを構築する、などあるかもしれません。これを手動で行うことは煩雑であり、shコマンドやPerlスクリプトを記述する方法を知っている場合、このタスクを自動化できます。

!!Mac OSX
プレイヤーをビルドした後、Unityは自動的に __PostprocessBuildPlayer__ （拡張子なし）という sh コマンドまたは Perl スクリプトを プロジェクトの Assets/Editor フォルダの中から探します。もしファイルが見つかった場合、プレイヤーがビルド完了した後に実行されます。

このスクリプトにより、プレイヤーのポストプロセスを好きなように行うことが出来ます。例えばプレイヤーからインストーラを構築する、などです。

Perl を使用したり、 sh コマンドまたはコマンドラインと互換のある言語を使用できます。

Unity は便利なコマンドライン引数をスクリプトを渡すため、どのようなプレイヤーであるか、およびどこに格納されているか知っています。

現在のディレクトリはプロジェクトフォルダに設定され、それが Assets フォルダを含むフォルダです。

[@#!/usr/bin/perl

my $installPath = $ARGV[0];

# 作成されるプレイヤーの種類:
# "dashboard", "standaloneWin32", "standaloneOSXIntel", "standaloneOSXPPC", "standaloneOSXUniversal", "webplayer"
my $target = $ARGV[1];

# どの最適化が適用されるか。現在では "" または Strip デバッグ記号が選択されたときに "strip" のいずれかです。
my $optimization = $ARGV[2];

# Project Settingsでセットした Name of the Company
my $companyName = $ARGV[3];

# Project Settingsでセットした Name of the Product
my $productName = $ARGV[4];

# デフォルトのプレイヤーのスクリーン幅。
my $width = $ARGV[5];

# デフォルトのプレイヤーのスクリーン高さ。
my $height = $ARGV[6];

print ("\n*** パス '$installPath' でビルド中、ターゲット: $target \n");
@]

いくつかの言語、例えば Python では、スクリプトの名前をコマンドライン引数として渡します。もしそういった言語を使用している場合、引数は配列のどこか箇所に効果的にシフト（インストールパスが  ARGV[1] となるように、等）されます。

この機能が動作しているところを見たい場合、Unity のウェブサイトの Example Projects を訪れて PostprocessBuildPlayer サンプル パッケージ ファイルをダウンロードして自身のプロジェクトで使用できるようにインポートして下さい。ビルドプレイヤー パイプライン機能を使用してWeb Player ビルドのカスタマイズしたポスト プロセッシングを提供していて、自身のPostprocessBuildPlayer スクリプトでどのようなカスタムのビルドの動作を実装できることのデモとなっています。


!!Windows

Windows上で、PostprocessBuildPlayer スクリプトはサポートされていませんが、エディタ スクリプティングを使用して同じ効果を得られます。 [[ScriptRef:BuildPipeline.BuildPlayer.html|BuildPipeline.BuildPlayer]] を使用してビルドを実行して、自分が必要なポストプロセッシングコードを続けることが出来ます:-

[@using UnityEditor;
using System.Diagnostics;

public class ScriptBatch : MonoBehaviour 
{
    [MenuItem("MyTools/Windows Build With Postprocess")]
    public static void BuildGame ()
    {
        // ファイル名の取得
        string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");
 
        // プレイヤーをビルド
        BuildPipeline.BuildPlayer(levels, path + "/BuiltGame.exe", BuildTarget.StandaloneWindows, BuildOptions.None);

        // ファイルをプロジェクトフォルダからビルドフォルダへビルドしたゲームと一緒にコピー
        FileUtil.CopyFileOrDirectory("Assets/WebPlayerTemplates/Readme.txt", path + "Readme.txt");

        // ゲームを実行（System.Diagnostics の Process クラス）
        Process proc = new Process();
        proc.StartInfo.FileName = path + "BuiltGame.exe";
        proc.Start();
    }
}@]
