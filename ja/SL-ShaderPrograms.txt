! 頂点シェーダとFragmentシェーダのプログラミング / Writing vertex and fragment shaders

$$ShaderLab$$ は単なるハードウェアシェーダー以上の機能を含みます。たくさんのことができます。まず、Properties(プロパティ:属性)はマテリアルのインスペクターに表示するものや、違うグラフィックスハードで動けるように複数のシェーダを含んだり、ハードが用意した固定関数を調整したり、などなどです。実際のプログラマブルシェーダ（頂点シェーダーやFragmentシェーダのプログラムのような）はShaderLabのシェーダのコンセプトの単なる一部です。[[ShaderTut2 | shader tutorial]] で基本的な説明をします。 ここではローレベルなハードに近いシェーダを $$shader programs$$と呼ぶことにします。

__もしライティングに反応するシェーダを書きたいなら、 [[SL-SurfaceShaders | Surface Shaders]] ドキュメントを読んで下さい。__ ここでは、Unityのライトで反応しないシェーダについて言及します。（例：スペシャルエフェクト、[[comp-ImageEffects | Image Effects]] 等）

Shader programs は Cg / HLSL 言語で書かれています。シェーダーテキストの中に[[SL-Pass|Pass]] コマンドの中に「スニペット」が埋め込まれます。だいたい以下のような感じになります：

  Pass {
      ''// ... いつものパスステートの設定 ...''
      
      __CGPROGRAM__
      ''// このスニペットのためのコンパイル命令, 例えば:''
      __#pragma vertex__ vert
      __#pragma fragment__ frag
      
      ''// Cg コード''
      
      __ENDCG__
      ''// ... 残りのパスの設定 ...''
  }


!! Cg スニペット

Cg プログラムスニペットは``CGPROGRAM`` と ``ENDCG``間に書かれます。

まずは``#pragma``ステートメントで始まります。ここの命令はコンパイルするため、どんなシェーダ関数なのかを指し示しています。:
* ``#pragma vertex ''name''`` - 頂点シェーダとして定義される ''name'' という名前の関数
* ``#pragma fragment ''name''`` - Fragment シェーダとして定義される ''name'' という名前の関数
* ``#pragma geometry ''name''`` - DX10のジオメトリシェーダとして定義される ''name'' という名前の関数。このオプションは自動的に ``#pragma target 4.0`` のスイッチオンとなります。詳しくは [[#target | 下 ]] を見て下さい。
* ``#pragma hull ''name''`` - DX11のHullシェーダとして定義される ''name'' という名前の関数。このオプションは自動的に ``#pragma target 5.0`` のスイッチオンとなります。詳しくは [[#target | 下 ]] を見て下さい。
* ``#pragma domain ''name''`` - DX11のDomeinシェーダとして定義される ''name'' という名前の関数。このオプションは自動的に ``#pragma target 5.0`` のスイッチオンとなります。詳しくは [[#target | 下 ]] を見て下さい。

その他のコンパイル命令:
* ``#pragma target ''name''`` - コンパイルするシェーダターゲットの指定。詳細は[[#target | shader targets]] を参照下さい。
* ``#pragma only_renderers ''space separated names''`` - 指定のレンダラのみシェーダをコンパイルします。デフォルトでは全てのレンダラのシェーダがコンパイルされます。詳細は[[#renderers | renderers]] を参照下さい。
* ``#pragma exclude_renderers ''space separated names''`` - 指定のレンダラのみシェーダをコンパイルしません。デフォルトでは全てのレンダラのシェーダがコンパイルされます。詳細は[[#renderers | renderers]] を参照下さい。
* ``#pragma glsl`` - デスクトップのOpenGLプロットフォーム向けにシェーダをコンパイルする場合、Cg/HLSLをGLSLに変換します（デフォルト設定ではARB頂点／フラグメントプログラム）。これによりデリバティブ指示、例えば明示的なLODレベルをもつテクスチャのサンプリングの場合、を有効化します。
* ``#pragma glsl_no_auto_normalization`` - モバイル向けGLSL （iOS/Android）シェーダをコンパイルするとき、法線／接線ベクトルの自動正規化をオフにします。デフォルトではiOS/Androidプラットフォームのシェーダにて法線／接線ベクトルは正規化されます。
* ``#pragma fragmentoption ''option''`` - コンパイルされたOpenGLフラグメントプログラムに''option''を追加します。使用できるオプションについては[[http://www.opengl.org/registry/specs/ARB/fragment_program.txt | ARB fragment program]] の仕様を参照して下さい。このディレクティブは頂点プログラムまたはOpenGLでないターゲット向けにコンパイルされたプログラムには効果がありません。

各スニペットは頂点プログラム、フラグメントプログラム、あるいは両方を保有する必要があります。したがって``#pragma vertex`` または``#pragma fragment`` 、あるいは両方が必要です。

[[#target]]
!! シェーダターゲット

デフォルトでは、Unityはシェーダをおおよそシェーダモデル2.0相当にコンパイルします。``#pragma target`` を使用することでシェーダは他のレベルにコンパイルすることが出来ます。現在は次のターゲットがサポートされています：
* ``#pragma target 2.0`` ''(default)'' - おおよそシェーダモデル2.0相当
** Direct3D 9のシェーダモデル2.0
** [[http://www.opengl.org/registry/specs/ARB/vertex_program.txt | ARB_vertex_program]] with 256 instruction limit and [[http://www.opengl.org/registry/specs/ARB/fragment_program.txt | ARB_fragment_program]] with 96 instruction limit (32 texture + 64 arithmetic), 16 temporary registers and 4 texture indirections.
** [[http://www.opengl.org/registry/specs/ARB/vertex_program.txt | ARB_vertex_program]] で256指示の制限、[[http://www.opengl.org/registry/specs/ARB/fragment_program.txt | ARB_fragment_program]] で96指示の制限（32テクスチャ+64演算）、16のテンポラリレジスタおよび4の間接テキスチャ（texture indirection）
* ``#pragma target 3.0`` - ターゲットをのシェーダモデル3.0にコンパイル：
** Direct3D 9のシェーダモデル3.0
** ARB_vertex_program with no instruction limit and ARB_fragment_program with 1024 instruction limit (512 texture + 512 arithmetic), 32 temporary registers and 4 texture indirections.
** ARB_vertex_program で指示制限なし、およびARB_fragment_programで1024指示の制限(512 テクスチャ + 512 演算), 32 テンポラリレジスタおよび 4間接テクスチャ。これらの制限を ``#pragma profileoption`` ディレクティブを使用してオーバーライドすることは出来ます。すなわち @@#pragma profileoption MaxTexIndirections=256@@ により間接テクスチャの制限を256に増加させます. いくつかのシェーダモデル3.0機能、たとえばデリバティブ指示などは、ARB_vertex_program/ARB_fragment_programでサポートされてないことに留意して下さい。``#pragma glsl`` を使用してGLSLに変換して制限がより少なくなります。

3.0より大きいターゲット向けにコンパイルするとき、頂点／フラグメントプログラムともに必要です。
* ``#pragma target 4.0`` - DX10シェーダーモデル4.0向けにコンパイルします。このターゲットは現在DirectX11レンダラのみでサポートされます。
* ``#pragma target 5.0`` - DX11シェーダーモデル5.0向けにコンパイルします。このターゲットは現在DirectX11レンダラのみでサポートされます。


[[#renderers]]
!! レンダリング　プラットフォーム

UnityはいくつかのレンダリングAPI（すなわちDirect3D 9およびOpenGL）をサポートし、デフォルトで全てのシェーダプログラムはサポートされているレンダラにコンパイルされます。どのレンダラにコンパイルするかは``#pragma only_renderers``あるいは``#pragma exclude_renderers``ディレクティブで指定できます。これはMac OS X（Direct3Dがない）のみ、Windows（UnityがデフォルトでD3Dを使用）のみ、あるいは特定のシェーダがあるレンダラでしか使用できず他では使用できない場合、に便利です。現在サポートされているレンダラの名前は：
* ``d3d9`` - Direct3D 9
* ``d3d11`` - Direct3D 11
* ``opengl`` - OpenGL
* ``gles`` - OpenGL ES 2.0
* ``xbox360`` - Xbox 360
* ``ps3`` - PlayStation 3
* ``flash`` - Flash

例えば、次の行は、シェーダをD3D9モードでのみコンパイルします：
  #pragma only_renderers d3d9


!! サブセクション

(:tocportion:)
