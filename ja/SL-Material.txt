! ShaderLab文法: Color、Material、Lighting / ShaderLab syntax: Color, Material, Lighting

materiaとlightingパラメータは内蔵の頂点ライティングを制御するのに使用します。頂点ライティングは各頂点で計算する標準的なDirect3D／OpenGLライティングモデルです。``Lighting on``により有効化されます。$$Material$$ ブロック、$$ColorMaterial$$ および $$SeparateSpecular$$ コマンドによりライティングの影響を受けます。

ピクセルライティングは通常カスタムの頂点／フラグメントプログラムで実装され、頂点ライティングを使用しません。これらについてはここで説明するコマンドは使用せず、自分の[[SL-ShaderPrograms | vertexおよびfragment program]] を定義し、そこで全てのライティング、テクスチャ、その他全てを自分で処理します。

Attach:SL./PipelineTL.png

頂点カラーリングおよびライティングはどのレンダリング形状のなかで最初に計算されるエフェクトです。頂点レベルで実行され、テクスチャが適用される前の、ベースカラーを算出します。

!! 文法
上位のレベルのコマンドは、fixed function（固定関数）ライティングを使用するかどうか、およびいくつかの設定オプションを、制御します。メインの設定は__Material Block__（マテリアルブロック）に含まれ、以下で詳細を説明します。
:__Color__ ''Color'': オブジェクトを単色に設定します。カラーは4つのRGBAの値を括弧（ ）で括るか、あるいはカラープロパティ名を括弧[ ]で括ります。
:__Material__ __{__ ''Material Block'' __}__:マテリアルブロックはオブジェクトのマテリアルプロパティを定義するのに使用します。
:__Lighting__ On | Off: マテリアルブロックの設定のエフェクトを有効にするためには、''Lighting On'' コマンドでライティングを有効化する必要があります。もしライティングが無効の場合、色は''Color'' コマンドから直接取得されます。
:__SeparateSpecular__ On | Off: このコマンドは鏡面ライティングをシェーダパスの終わりに追加するため、鏡面ライティングはテクスチャによる影響を受けません。''Lighting On'' が使用されている場合のみエフェクトが有効です。
:__ColorMaterial__ AmbientAndDiffuse | Emission: 頂点カラーを、マテリアルで設定したカラーに優先して、使用します。``AmbientAndDiffuse`` はマテリアルのAmbient、Diffuseの値を置き換え、``Emission``はマテリアルのEmissionの値を置き換えます。

!!!Materialブロック

ここではマテリアルが光に対して反応する方法を設定します。これらのプロパティのどれも必須ではなく、指定しない場合のデフォルト値は黒です（すなわちエフェクトなし）。

:__Diffuse__ ''Color'': 拡散カラーコンポーネント。オブジェクトのベースカラーです。
:__Ambient__ ''Color'': 環境光カラーコンポーネント。この色は、オブジェクトが環境光に当たった時に[[class-RenderSettings]] で設定された、オブジェクトが保有する色です。 :__Specular__ ''Color'': The color of the object's specular highlight.
:__Shininess__ ''Number'': ハイライトのシャープネスで、0から1まで設定できます。0では拡散ライティングに良く似た巨大なハイライトで、1ではわずかな小粒のハイライトです。
:__Emission__ ''Color'': オブジェクトが、どのような光にも当てられない場合のオブジェクトのカラー

オブジェクトに当てられたライトのフルカラーは：

  __Ambient__ * [[class-RenderSettings | RenderSettings ambient setting]] +
  (Light Color * __Diffuse__ + Light Color * __Specular__) + __Emission__

計算式のライト部分（括弧( )内における）は、オブジェクトに当たる全てのライトの分だけ、繰り返されます。

通常はDiffuse（拡散）とAmbient（環境光）カラーは同じにすることが望ましいです（全てのUnityビルトイン シェーダはそのようにしています）。


!!例

常にオブジェクトを純粋な赤でレンダリングします：
[@Shader "Solid Red" {
    SubShader {
        Pass { Color (1,0,0,0) }
    }
} @]


オブジェクトを白に色付けして頂点ライティングを適用する、基本的なシェーダ
[@Shader "VertexLit White" {
    SubShader {
        Pass {
            Material {
                Diffuse (1,1,1,1)
                Ambient (1,1,1,1)
            }
            Lighting On
        }
    }
} @]

マテリアルインスペクタで表示するマテリアルカラーを追加する、拡張バージョン：

[@Shader "VertexLit Simple" {
    Properties {
        _Color ("Main Color", COLOR) = (1,1,1,1)
    }
    SubShader {
        Pass {
            Material {
                Diffuse [_Color]
                Ambient [_Color]
            }
            Lighting On
        }
    }
} @]


そして最後に、本格バージョンの頂点ライティングシェーダ（[[SL-SetTexture|SetTexture]] もあわせて参照下さい。）：
[@Shader "VertexLit" {
    Properties {
        _Color ("Main Color", Color) = (1,1,1,0)
        _SpecColor ("Spec Color", Color) = (1,1,1,1)
        _Emission ("Emmisive Color", Color) = (0,0,0,0)
        _Shininess ("Shininess", Range (0.01, 1)) = 0.7
        _MainTex ("Base (RGB)", 2D) = "white" {}
    }
    SubShader {
        Pass {
            Material {
                Diffuse [_Color]
                Ambient [_Color]
                Shininess [_Shininess]
                Specular [_SpecColor]
                Emission [_Emission]
            }
            Lighting On
            SeparateSpecular On
            SetTexture [_MainTex] {
                Combine texture * primary DOUBLE, texture * primary
            }
        }
    }
} @]
