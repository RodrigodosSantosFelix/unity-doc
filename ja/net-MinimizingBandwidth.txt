! ネットワーク帯域幅の最小化

ゲームの他の部分と比較するとネットワーク通信は遅いため、最小に抑えることが重要です。このため、データ交換を行っている量や発生の頻度を考慮することがとても重要です。


!! データが同期される方法

使用されるネットワーク帯域幅は``Unreliable``（非信頼）か``Reliable Delta Compression``（信頼差分圧縮）、どちらのモードを使用してデータの同期を行っているかに大きく依存します。（モードはNetwork Viewコンポーネントからセットします）

``Unreliable``（非信頼）モードでは、同期されるオブジェクトの全体がネットワーク更新ループの全ての反復ごとに送信されます。この更新頻度は [[ScriptRef:Network-sendRate.html|Network.sendRate]] の値により決定され、デフォルトでは1秒ごとに15更新にセットされてます。``Unreliable``モードは頻繁な更新を保証する一方でパケットの逸失や遅延は単に無視されます。頻繁に更新が行われ、更新を逃しても影響する時間的長さが短いオブジェクトにとっては最適の同期方法です。しかし更新ごとに発生するデータ量は頭に入れておく必要があります。例えばTransformの同期は9つの浮動小数点データ（3つのVector3に各々3つの浮動小数点）を伴い、更新ごとに36バイトを意味します。もしサーバが8クライアントで実行していてデフォルトの更新頻度を使用している場合4,320KBytes/s（8×36×15）あるいは34.6Kbit/sを受信し、30.2KBytes/s（8×7×36×15）あるいは242Kbits/sを送信します。帯域幅の消費量を大きく減らすために更新頻度を下げることは出来ますが、アクションが素早いゲームにおいて15というデフォルト値は大体適切なものです。

``Reliable Delta Compressed``モードでデータは信頼性をもって正しい順番で受信されることが保証されてます。もしパケットを逸失した場合再送信され、順番が正しくない場合、全てのパケットが一連のパケットが全て到着するまでバッファリングされます。これにより送信されたデータが正しく受信されることを保証するものの、この待機および再送信が帯域幅を消費しがちです。しかしデータは差分圧縮され、前回の状態と現在の状態の差分のみが送信されます。もし状態がまったく同一である場合何も送信されません。差分圧縮はどれだけどのプロパティが変化するかに依存します。


!! どのデータが同期されるか

全てのクライアントで実際に同じでない状態を同じである''かのように''ゲーム設計を創造する機会があります。
There is plenty of opportunity for creativity in designing the game so that the state ''appears'' to be the same on all clients even though it may not be, strictly. An example of this is where animations are synchronized. If an Animation component is observed by a Network View then its properties will be synchronized exactly, so the frames of animation will appear exactly the same on all clients. Although this may be desirable in some cases, typically it will be enough for the character to be seen as walking, running, jumping, etc. The animations can thus be crudely synchronized simply by sending an integer value to denote which animation sequence to play. This will save a great deal of bandwidth compared to synchronizing the whole Animation component.


!! When to synchronize data

It is often unnecessary to keep the game perfectly in sync on all clients, for example, in cases where the players are temporarily in different areas of the game world where they won't encounter each other. This can reduce the bandwidth as well as the load on the server since only the clients that can interact need to be kept in sync. This concept is sometimes referred to as $$Relevant Sets$$ (ie, there is a subset of the total game that is relevant to any particular client at any particular time). Synchronizing clients according to their relevant sets can be handled with RPCs, since they can give greater control over the destination of a state update.


!!! Level loading

When loading levels, it is seldom necessary to worry about the bandwidth being used since each client can simply wait until all the others have initialized the level to be played. Level loading can often involve transmitting even quite large data items (such as images or audio data).
