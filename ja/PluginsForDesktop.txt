! デスクトップ プラットフォームのプラグインをビルドする / Building Plugins for Desktop Platforms

このページはデスクトッププラットフォーム（Windows/MacOS X/Linux）の [[Plugins | ネイティブ コード プラグイン]] について記述します。これらのプラグインはセキュリティ上の理由によりsWebplayerで無効になっていることに注意してください。


!! Mac OS X用のプラグインをビルドする

MacOSXでは [[Plugins | plugins]] はバンドルとしてデプロイされます。バンドルプロジェクト (Bundle Project）はXcodeの ^^File->NewProject...^^ を選択し、^^Bundle^^ -> ^^Carbon/Cocoa Loadable Bundle^^ （XCode 3の場合）または ^^OS X^^ -> ^^Framework & Library^^ -> ^^Bundle^^ （XCode 4の場合） を選択してください。

もしC++（.cpp）もしくはObjective-C（.mm）でプラグインを実装する場合、関数が [[http://en.wikipedia.org/wiki/Name_mangling | Name Mangling の問題]] を避けるため、C のリンク で宣言されていることを確認する必要があります。

[@extern "C" {
  float FooPluginFunction ();
} @]

!! Windows用のプラグインをビルドする

Windows用のプラグインはエクスポートされた関数を持つDLLファイルです。これは実質的に、どのような言語・開発環境でも作成できます。\\
Mac OSXと同様、ネーム・マングル（Name Mangling）の問題を回避するためには、任意のC++関数は C のリンクを宣言する必要があります。

!! Linux用のプラグインをビルドする

Linuxのプラグインは、エクスポートされた関数を持つ @@.so@@ ファイルです。これらのライブラリも例によってCまたはC++で記述され、任意の言語で使用することができます。\\
また他のプラットフォームと同様に、任意のC++関数はCリンケージを宣言する必要があります。

!! 32-bitと64-bitのライブラリ
32-bit様 および/または 64-bit用 プラグインを必要とする問題は、プラットフォームにより異なる形でハンドリングされています。

!!! Windows および Linux
Windows および Linux では、プラグインは手動で管理する（すなわち、64-bit プレイヤーをビルドする前に @@Assets/Plugins@@ フォルダに64-bitライブラリをコピーする必要があり、32-bit用プレイヤーをビルドする前に、32-bitライブラリを @@Assets/Plugins@@ フォルダにコピーする必要があります）、または32-bit用のプラグインを @@Assets/Plugins/x86@@ に配置して、64-bit用のプラグインを @@Assets/Plugins/x86_64@@ に配置出来ます。デフォルトではエディタはアーキテクチャ特有のサブディレクトリを先に見て、もしディレクトリが存在しない場合、プラグインをルートの @@Assets/Plugins@@ フォルダから代わりにコピーします。

ユニバーサル Linux ビルドについては、アーキテクチャ特有のサブディレクトリを使用する必要があることに留意して下さい（ユニバーサル Linux ビルドをビルドするとき、エディタはルートの） @@Assets/Plugins@@ からプラグインを一切コピーしません。

!!! Mac OS X
Mac OS Xについては、プラグインを32-bit、64-bit両方のアーキテクチャを保有するユニバーサルバイナリとしてビルドすべきです。

!! C#からプラグインを使用する

一度ビルドしたバンドルはUnityプロジェクトの ^^Assets->Plugins^^ フォルダに配置する必要があります。UnityはC#スクリプトに関数を定義したときの名前で探します。:-

[@[DllImport ("PluginName")]
private static extern float FooPluginFunction (); @]

なお、 ``PluginName`` がライブラリのプレフィックス（prefix）やファイル拡張子を含める必要は無いことに注意してください。例えば、プラグインファイルの実際の名前は、Windowsの場合はPluginName.dll、Linuxの場合はlibPluginName.soです。\\
プラグインでコードを変えるときはいつでも、あなたがプロジェクトでスクリプトを再コンパイルする必要があることに注意してください、でなければ、プラグインには最新のコンパイルされたコードがありません。

!! 配置（Deployment）

クロスプラットフォームなプラグインは、Pluginsフォルダに.bundle（Mac用）、.dll（windows用）、.so（Linux用）のファイルを含めなければなりません。\\
それ以上の作業はありません。Unityは自動的にターゲットプラットフォームのためのプラグインを抽出し、プレイヤーに含めます。

!! サンプル

!!! 単純なプラグイン
このプラグインプロジェクトはいくつかの非常に単純な機能を提供します（数字のプリント、文章のプリント、小数の足し算、整数の足し算）。このプロジェクトは [[Attach:SimplestPluginExample-4.0.zip | ここ]] で見つけることができます 。また、このプロジェクトにはWindows用、Mac用、Linux用のプロジェクトが含まれています。

!!! C++のコードからレンダリング
マルチスレッドレンダリングプラグインのマルチプラットフォーム動作例は、 [[Native Plugin Interface]] ページで見つけることができます。
(:comment These examples seem to be missing in action:)
(:if false:)
!!! ミディプラグイン（Midi Plugin）
完全なプラグインサンプルインターフェースは、 [[http://unity3d.com/tutorials/midiplugin.zip|ここ]] で見つけることができます。

これは、AppleのCoreMidi APIを使用しているOS Xのための完全なMIDIプラグインです。Unityから単純なC言語のAPIにアクセスするためのC#クラスを提供します。C#クラスは高レベルなAPIが含まれており、NoteOnおよびNoteOffイベントとその速度（velocity）に簡単にアクセスすることができます。

!!! テクスチャプラグイン
直接OpenGLのテクスチャに画像を割り当てる方法の例です（UnityがOpenGLテクスチャを使用している場合のみ動作します）。この例では、XcodeやVisual Studioプロジェクトファイルの両方が含まれます。プラグインは添付のUnityプロジェクトと一緒に [[http://unity3d.com/support/resources/example-projects/texture-plugins|ここ]] で見つけることができます。
(:ifend:)
