!Mecanim Performance and Optimization

!!Visibility and Updates

It is recommended to optimize animations by setting the animators's ``Culling Mode`` to ``Based on Renderers``, and to disable the skinned mesh renderer's ``Update When Offscreen`` property. This way animations won't be updated when the character is not visible. See the [[class-SkinnedMeshRenderer | skinned mesh renderer]] for further information.

!!Amount of Bones

In some cases you might need to create characters with a large amount of bones, for example when you want a lot of customizable attachments. These extra bones will slightly increase the size of the build, and you could expect to have a relative processing cost for each additional bone. In example 15 additional bones on a rig that already has 30 bones, should take 50% longer to solve, in Generic mode. Note that you can have additional bones in Generic and in Humanoid mode. When you have no animations playing on the additional bones the processing cost should be negligible. This cost will be even lower if their attachments are non existent or hidden.

!!Multiple Skinned Meshes

Combine skinned meshes whenever is possible. Splitting a character into two skinned mesh renderers is a bad idea performance wise. It's better if your character has just one material, but in some cases you might require more materials.

!!Controllers

The animator doesn't use processing when a controller is not set to it.

!!Simple Animation

Playing a single animation clip with no blending can make Mecanim slower than the legacy animation system. The old system is very direct, sampling the curve and directly writing into the transform. Mecanim has temporary buffers it uses for blending, and there is additional copying of the sampled curve and other data. The Mecanim layout is optimized for animation blending and more complex setups.

!!Scale Curves

Don't use scale curves. Always double check there aren't scale curves that don't change any of the values. Make sure that there is not a single scale curve on any animation clip. You can write an asset post-procesor to remove or warn about them.

!!Layers

Most of the time Mecanim is evaluating animations, but the overhead for layers and state machine processing is kept to the minimal. The cost of adding another layer to the animator, synchronized or not, depends on what animations and blend trees are played by the layer. When the weight of the layer is zero, the layer update will be skipped.

!!Humanoid vs. Generic Modes

These tips will help you decide between these modes:

*When you have IK pass enabled and Foot IK enabled on your animation states, you will get better performance with Generic Mecanim mode.
*When you use Generic, using root motion is more expensive than not using root motion. So if your animations don't use root motion, make sure that you have no root bone selected.
*On Android you will get worse performance since we don't do NEON there at the moment. Especially Humanoid mode is very math heavy so it can easily be 2-2.5x slower without NEON.

!!Mecanim Scene

There are many optimisations that can be made, some useful tips include:

*Use hashes instead of strings to query the Animator.
*Implement a small AI layer to control the Animator. You can make it provide simple callbacks for OnStateChange, OnTransitionBegin, etc.
*Use "State Tags" to easily match your AI StateMachine to the Mecanim StateMachine.
*Use additional curves to simulate Events.
*Use additional curves to markup your animations, for example in conjunction with [[TargetMatching | target matching]].
