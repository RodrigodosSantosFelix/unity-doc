! ShaderLab文法：プロパティ

シェーダにより、Unityの[[Materials|material inspector]] 上で、アーティストがセットできるパラメータの一覧を定義できます。シェーダでのPropertiesブロックで定義します。

!!文法
:__Properties__ { ''Property'' [''Property ...''] }: プロパティのブロックを定義します。波括弧{}の中で次のように複数のプロパティを定義します。
:''name'' ("''display name''", __Range__ (''min'', ''max'')) = ''number'': floatプロパティを定義し、インスペクタ上でスライドバーが''min''から''max''として表現。
:''name'' ("''display name''", __Color__) = (''number'',''number'',''number'',''number''): colorプロパティを定義。
:''name'' ("''display name''", __2D__) = "''name''" { ''options'' }: 2Dテクスチャプロパティを定義。
:''name'' ("''display name''", __Rect__) = "''name''" { ''options'' }: 長方形（2のべき乗でない）テクスチャのプロパティを定義。
:''name'' ("''display name''", __Cube__) = "''name''" { ''options'' }: キューブマップテクスチャのプロパティを定義。
:''name'' ("''display name''", __Float__) = ''number'': floatプロパティを定義
:''name'' ("''display name''", __Vector__) = (''number'',''number'',''number'',''number''): 4コンポーネント　ベクトルのプロパティを定義。

!!詳細

シェーダの各プロパティは__name__により参照されます（Unityで、シェーダのプロパティ名をアンダースコアで始めるのは一般的）。プロパティはマテリアルインスペクタ上で__display name__として表示されます。各プロパティのデフォルト値は等号=のあとに記述します。
* ''Range'' と''Float'' プロパティでは1つの数字。
* ''Color'' と''Vector'' プロパティでは括弧()で括る4つの数字。
* テクスチャ(''2D'', ''Rect'', ''Cube'')ではデフォルト値は空の文字列か内蔵のデフォルトテクスチャ: "''white''" 、"''black''" 、"''gray''" 、"''bump''" 。

シェーダの後のほうで、プロパティの値は括弧[]でプロパティネームを記述して参照します：__[name]__。

!!例

[@Properties {
    // 水シェーダのプロパティ
    _WaveScale ("Wave scale", Range (0.02,0.15)) = 0.07 // スライドバー
    _ReflDistort ("Reflection distort", Range (0,1.5)) = 0.5
    _RefrDistort ("Refraction distort", Range (0,1.5)) = 0.4
    _RefrColor ("Refraction color", Color)  = (.34, .85, .92, 1) // color
    _ReflectionTex ("Environment Reflection", 2D) = "" {} // テクスチャ
    _RefractionTex ("Environment Refraction", 2D) = "" {}
    _Fresnel ("Fresnel (A) ", 2D) = "" {}
    _BumpMap ("Bumpmap (RGB) ", 2D) = "" {}
} @]


!!!テクスチャプロパティのオプション

テクスチャプロパティの波括弧{}の中の''options''は任意のオプションです。利用可能なオプションは：

* __TexGen__ ''texgenmode'': このテクスチャの自動テクスチャ座標生成モード。''ObjectLinear'' 、''EyeLinear'' 、''SphereMap'' 、''CubeReflect'' 、''CubeNormal'' のいずれかで、これらはOpenGL texgenモードと直接に対応する。カスタムのvertex program（頂点プログラム）が使用されている場合はTexGenは無視されるので留意して下さい。
* __LightmapMode__ 記述した場合、テクスチャは各レンダラーごとのライトマップパラメータの影響を受けます。つまり使用するテクスチャはマテリアルにないが、レンダラの設定から取得します、詳細は[[ScriptRef:Renderer-lightmapIndex.html | Renderer scripting documentation]] を参照下さい。

!!!例

[@// EyeLinear texgenモードの例
Shader "Texgen/Eye Linear" {
    Properties {
        _MainTex ("Base", 2D) = "white" { TexGen EyeLinear }
    }
    SubShader {
        Pass {
            SetTexture [_MainTex] { combine texture }
        }
    }
} @]

