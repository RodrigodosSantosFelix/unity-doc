! グラフィック アセット ベストプラクティス ガイド / Art Asset Best-Practice Guide

Unity は幅広いプログラムやソースからの テクスチャつき 3D モデルをサポートします。この短文のガイドは Unity 開発者とともに ゲームアーティストにより、Unity プロジェクトでより良い動作をしてより効率的なアセットを作成する手助けとなるように、まとめらていてます。

!! スケール および 長さの単位

* Unity で一貫して動作するように、システムおよびソフトウェアにおけるプロジェクトの長さの単位を設定します（例えば、メートル単位で）。
** 縮尺が合うように作業を行うことは、ライティングおよび物理シミュレーションの両方で重要です。
** 例えば、 Max のシステムデフォルトの長さの単位がインチで、Maya がセンチメートルであることに注意します。
** Unity は FBX および インポートする 3D アプリケーションファイルで異なるスケーリングを持っています。インスペクタで FBX インポート Scale Settingチェックします。
** もし分からなければシーンに 1 立方メートルのキューブをエクスポートして Unity でマッチングしてみます。
* アニメーション フレームレートのデフォルトはパッケージにより異なり、パイプラインを通じて一貫して、例えば 30fpsに、セットすることは大事です。


!!ファイルおよびオブジェクト
* シーンのオブジェクトは意味のある形で、一意にネーミングします。これによりプロジェクトの特定のメッシュを見つけたり、トラブルシューティングを行う際の手助けとなります。
* 特殊文字 @@*()?"#$@@ 、等を避けます。
* オブジェクトおよびファイルにシンプルかつ分かりやすいネーミングを使用します（後々で複製できる名前にします）。
* 階層はできるかぎりシンプルにします。
* 3D アプリケーションの大きなプロジェクトでは、作業ファイルを Unity プロジェクト ディレクトリの外にすることを検討します。これは時間消費の激しい更新や不要なデータのインポート、に要する時間の節約となります。

Attach:HierarchyWrongRight.png
''意味のあるネーミングのついたオブジェクトにより素早くものを見つけられます''

!メッシュ

* 効率的なトポロジーでビルドします。ポリゴンは必要なときのみ使用します。
* ポリゴン数が多すぎる場合、ジオメトリを最適化します。多くのキャラクターモデルは特に次のようなソース元である／ビルドされている場合、理性的な最適化が必要であったり、最悪アーティストにより作り直しが必要となります。
** 3D キャプチャデータ
** Poser
** Zbrush
** その他、レンダリングのためにデザインされた高密度な NURBS／Patch モデル
* できるかぎりビル、地形、および建造物で均等に配置されたポリゴンとすることで、適切なライティングを広げ、おかしな描画を避けます。
* 非常に細長い三角形を避けます。

Attach:GeomWrongRight.png
''フレームレート天国への階段''

オブジェクトを構築する手法は、特に最適化されたない場合、数々のポリゴンに多大な影響があるかもしれません。この図では同じ形状のメッシュが右では 156 個、左では 726 個です。 726 個はそれほど大きなポリゴン数に聞こえないかもしれませんが、これが レベル中に 40回使用されると節約の効果は明白になります。経験則では、最初はシンプルに始めて、必要なところだけディテールを追加します。ポリゴンを取り除くより足す方がつねに簡単です。

!テクスチャ

もしテクスチャを 2 の累乗で生成すると（例えば 512 x 512 または 256 x 1024）、テクスチャはより効率的となり、ビルド時に再スケールは不要です。4096 x 4096 ピクセルまで使用できます（ただし 2048 x 2048 が多くのグラフィックスカード／プラットフォームでの最大値ですが）。ウェブで検索をして良いテクスチャを作成する方法や専門的なアドバイスを探せますが、次のガイドラインのいくつかにより自身のプロジェクトでテクスチャがもっとも効率的な結果が得られる手助けとなります:
* Unity プロジェクトの外で高解像度のソースファイルで作業を行います（例えば PSD または GIMP ファイル）。ソースからダウンサイジングはいつでも出来ますが、逆はできません。
* シーンで必要なテクスチャ解像度出力を使用します（例えばコピーを保存して 256 x 256 で最適化されたPNG または TGA ファイル）。テクスチャがどこで見られ、どこにマッピングされるかの判断を出来ます。
* 出力テクスチャ ファイル を Unity プロジェクトで同じ場所に格納します（例えば: \Assets\textures）。
* 保存／エクスポートするときに 3D 作業ファイルが一貫して同じテクスチャを参照していることを確認します。
* テクスチャの利用可能な空きスペースを活用して、一方で異なるマテリアルが同じテクスチャの異なる部分を必要とすることに注意します。結果として同じテクスチャを何回も使用／ロードすることになります。
* アルファ（カットアウト）および異なるシェーダを必要とする要素は、テクスチャを分けて下さい。例えば、下記のひとつのテクスチャ（左側）は 3 つのより小さなテクスチャにより置き換えられます（右側）。

Attach:Pack_WrongRight2.png
''ひとつのテクスチャ (左) 対 3 つのテクスチャ (右)''

* タイリング テクスチャを活用（シームレスに繰り返す）して、これにより良い解像度で全体に繰り返すことが出来ます。
* ビットマップから簡単に気付ける反復要素は取り除き、コントラストに慎重となります。もしディテールを追加した場合デカールおよびオブジェクトを使用して繰り返しをなくします。

Attach:TexWrongRight.png
''絶対である、テクスチャのタイリング''

* Unity は外部プラットフォーム向けの圧縮には対応してくれるため、ソースがすでに正しい解像度の JPG 場合、テクスチャで劣化しない形式を使用するのが良いです。
* 写真からテクスチャページを作成するとき、繰り返しできる、個別の部品のセクションに削減します。例えば、同じウィンドウを 12 個用意してテクスチャ空間を使い切る必要はありません。使い切らないことで、ひとつのウィンドウにより多くのピクセル詳細を持たせることが出来ます。

Attach:BuildingWrongRight.png
''そのウィンドウは「全て」必要ですか？''

!マテリアル
* シーンのマテリアルを整理し名前づけをします。これにより Unity のマテリアルがインポートされたとき、マテリアルを探し、編集するこが出来ます。
** <モデル名>-< マテリアル名> または:
** <テクスチャ名> -  どれがほしいものかチェックすること。
* ネイティブパッケージのマテリアルの設定は Unity にインポートされません。
** Diffuse Colour, Diffuse texture および Names は通常サポートされています。
** シェーダモデル、鏡面、法線、および他の二次テクスチャおよび Substance Material設定は認識／インポートされません（Unity 3.5で対応予定）。 

!インポート／エクスポート

Uniy は2種類のファイルを脚用できます。保存された 3D アプリケーションファイルおよびエクスポートされた 3D フォーマット。どちらを使用すべきかはかなり重要です。

!!アプリケーション ファイルの保存

Unity は変換を通してインポートできます:  Max, Maya, Blender, Cinema4D, Modo, Lightwave および Cheetah3D ファイル, 例えば .MAX, .MB, .MA その他。
詳細については [[HOWTO-importObject|オブジェクトのインポート]] を参照して下さい。

__長所__:

* 速い反復プロセス (保存すれば Unity が更新してくれる)
* 最初がシンプル

__短所__:
* Unity プロジェクトを使用する全てのマシンにライセンスあるソフトウェアがインストールされている必要があります。
* ファイルは不要なデータで満杯になることがあります。
* 大きなファイルにより Unity が再び遅くなることがあります。
* より少ないバリデーションチェック、および、トラブルシューティングが難しくなりつつある

!!エクスポートされた 3D フォーマット

Unity はさらに FBX, OBJ, 3DS, DAE および DXF ファイルを読み込み出来ます。全般的なガイドとしては、テクスチャ [[HOWTO-exportFBX|このセクション]] を参照して下さい。

__長所__:

* 必要なデータのみエクスポートします
* Unity より前にデータの検証がなされます (3D パッケージに再インポート)
* 一般的にファイルが小さくなります
* モジュール的接近法 を奨励します

__短所__:

* パイプラインやプロトタイピング、および反復が遅くなる場合があります。
* ソース（作業ファイル）とゲームデータ（エクスポートされたFBX）の間でバージョンを見失う可能性がありおます。

