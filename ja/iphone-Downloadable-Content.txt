! アプリケーションでの"アプリ内課金" の準備 / Preparing your application for "In App Purchases"

本項ではAppleの"StoreKit" APIをゲームと連動させる方法についてはカバー __していません__ 。ここでは [[Main.Plugins|ネイティブ コード プラグイン]] を通して"StoreKit" と連動が出来ていることが前提となっています。

Appleの "StoreKit" ドキュメントにより四つの __製品__ を"アプリ内課金" で販売することが出来ます:
* コンテンツ
* 機能
* サービス
* 購読
本項では最初のケースのみをカバーしていてダウンロード可能なコンテンツの考え方に、フォーカスします。
[[ScriptRef:AssetBundle.html | AssetBundle]] はダウンロード可能なコンテンツとして使用することを推奨しますが、二つのシナリオを見ていきます:
* アセットバンドルをiOSで使用するためにどのようにしてエクスポートするか
* iOSからどのようにしてダウンロードしてキャッシュするか

アセットバンドルは Unity Pro のみの機能であることに留意して下さい。iOS （Basic）アドオンのユーザはゲームコードの中でAsset Bundle を使用することが出来ません。

!! iOSで使用するためにエクスポートする
 ダウンロード可能コンテンツのためにプロジェクトを分けることは良いアイデアでメインアプリケーションと後からダウンロードするコンテンツを適切に分けられます。

注意: ダウンロード可能コンテンツに含まれるゲーム スクリプトはメインの実行ファイルはメインの実行ファイルにも含まれる必要があります。（iOS では全てのゲームスクリプトは事前コンパイラ（AOT コンパイラ）により ARM アセンブルにコンパイルされ XCode プロジェクトに含まれるためです。）

# プロジェクトビューで ``Editor`` フォルダを作成します。
#  ``ExportBundle.js`` スクリプトを作成して次のコードを含めます。inside:\\
[@
@MenuItem ("Assets/Build AssetBundle From Selection - Track dependencies")
static function ExportBundle(){
        
        var str : String = EditorUtility.SaveFilePanel("バンドルを保存します...", Application.dataPath, Selection.activeObject.name, "assetbundle");
        if (str.Length != 0){
             BuildPipeline.BuildAssetBundle(Selection.activeObject, Selection.objects, str, BuildAssetBundleOptions.CompleteAssets, BuildTarget.iPhone);
        }
}
@]
# ダウンロード可能とするオブジェクトをプレハブとして設計します
# エクスポートが必要なプレハブを選択してマウス右クリック ``ExportBundle.js``\\
Attach:iPhoneAssetBundleExport.png\
\
最初の二つのステップが正しく手順どおりであると、'Build AssetBundle From Selection - Track dependencies'' コンテキストメニューは見られます。

# アセットが使用する全てを含めたい場合は選択します。
# 保存ダイアログが表示されろので、希望するアセットバンドルのファイルめいを入力します。__.assetbundle__ 拡張子が自動的に付加されます。Unity iOSのランタイムは同じバージョンのUnityエディタでビルドされたアセットバンドルのみ許可します。詳細については [[ScriptRef:BuildPipeline.BuildAssetBundle.html | BuildPipeline.BuildAssetBundle]] を参照下さい。

!! iOSでアセットをダウンロードする
# [[ScriptRef:WWW-assetBundle.html|WWW クラス]] の使用およびメインアセットをインスタンス化により、アセットバンドルをダウンロードおよびロード出来ます。アセットバンドルをダウンロードする際に推奨する方法は [[ScriptRef:WWW.LoadFromCacheOrDownload.html|LoadFromCacheOrDownload]] メソッドです。次のコードサンプルにより実現方法を示します:\\
[@
	var download : WWW;
	
	var url = "http://somehost/somepath/someassetbundle.assetbundle";
	
	download = WWW.LoadFromCacheOrDownload (url, 0);
	
	yield download;
	
	assetBundle = download.assetBundle;

	if (assetBundle != null) {
		// 他の方法として名前によりアセットをロード出来ます
(assetBundle.Load("my asset name"))
		var go : Object = assetBundle.mainAsset;
			
		if (go != null)
			instanced = Instantiate(go);
		else
			Debug.Log("リソースをロード出来ませんでした");	
	} else {
		Debug.Log("リソースをロード出来ませんでした");	
	}
@]\\
ダウンロードされたアセットバンドル ファイルは iOS アプリケーション Sandbox の @@Library@@ フォルダに格納されていてファイルに ''No Backup'' フラグが有効化されています。 これが意味することは OS はこれらのファイルを誤って削除せず、これらのファイルは iCloud にバックアップされないということです。 [[ScriptRef:Caching-maximumAvailableDiskSpace.html|キャッシュ サイズ のリミット]] を低く抑えることで、アプリがデバイスのディスクスペースの全てを確保してしまうことを防止すべきです。
# もしより細かいところまでキャッシュファイルを制御しないといけない場合、 WWW ダウンロードを [@ new WWW(url) @] 経由で使用して、.NET ファイル API を使用してダウンロードされたファイルをディスク上で格納することが出来ます。必要なファイルを [[ScriptRef:Application-temporaryCachePath.html|Application.temporaryCachePath]]  (OS によりクリーンされる Library/Caches) フォルダまたは [[ScriptRef:Application-persistentDataPath.html|Application.persistentDataPath]] (OS によりクリーンされない Documentsフォルダ) に保存することが出来ます。これらのファイルの ''No Backup'' フラグを [[ScriptRef:iPhone.SetNoBackupFlag.html|iPhone.SetNoBackupFlag]] 経由で有効化すべきであり、 iCloud にバックアップされることを防止すべきです。 __注意:__ このフラグをセットしないことで App Store 提出時にアプリ審査がリジェクトされるかもしれません。これらのファイルを将来的に再利用するために [[ScriptRef:WWW.html|WWW クラス]] および @@file:///pathtoyourapplication/Library/savedassetbundle.assetbundle@@ 経由でロードして下さい。キャッシングのコードでのサンプルは:\\
	// コードはiPhoneでのキャッシュとして設計されていて、エディタ実行時はcachedAssetBundleパスは異なるものにする必要があります。
	// Library/Cachesフォルダへのパス取得については上記の短いコードで確認出来ます
	private var cachedAssetBundle : String = "Documents フォルダへのパス" + "/savedassetbundle.assetbundle"; 
	private var cachedAssetBundle : String = Application.temporaryCachePath + "/savedassetbundle.assetbundle";
	var cache = new System.IO.FileStream(cachedAssetBundle, System.IO.FileMode.Create);
	cache.Write(download.bytes, 0, download.bytes.Length);
	cache.Close();
        iPhone.SetNoBackupFlag(cachedAssetBundle);
	Debug.Log("Cache saved: " + cachedAssetBundle);
@]
->__注意:__ Documentsフォルダからファイル読込みのテストはファイル共有を行えば出来ます。@@Info.plist@@ で @@UIFileSharingEnabled@@ をtrue にすることでiTunesからDocumentsフォルダにアクセス出来ます。Documents のコンテンツは iCloud にキャッシュされるため、出荷タイトルにおいてアセットバンドルを格納すべき場所ではありません。Apple iOS ドキュメントの中の [[http://developer.apple.com/library/ios/documentation/FileManagement/Conceptual/FileSystemProgrammingGUide/FileSystemOverview/FileSystemOverview.html | File System Basics]] を参照して下さい。
