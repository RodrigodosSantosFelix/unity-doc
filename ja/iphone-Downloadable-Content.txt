! アプリケーションでの"アプリ内課金" の準備

本項ではAppleの"StoreKit" APIをゲームと連動させる方法についてはカバー __していません__ 。ここでは [[Main.Plugins|ネイティブ コード プラグイン]] を通して"StoreKit" と連動が出来ていることが前提となっています。

Appleの "StoreKit" ドキュメントにより四つの __製品__ を"アプリ内課金" で販売することが出来ます:
* コンテンツ
* 機能
* サービス
* 購読
本項では最初のケースのみをカバーしていてダウンロード可能なコンテンツの考え方に、フォーカスします。
[[ScriptRef:AssetBundle.html | AssetBundle]] はダウンロード可能なコンテンツとして理想的で、二つのシナリオをカバーします:
* アセットバンドルをiOSで使用するためにどのようにしてエクスポートするか
* iOSからどのようにしてダウンロードしてキャッシュするか

!! iOSで使用するためにエクスポートする

 ダウンロード可能コンテンツのためにプロジェクトを分けることは良いアイデアでメインアプリケーションと後からダウンロードするコンテンツを適切に分けられます。

注意: ダウンロード可能コンテンツに含まれるゲーム スクリプトはメインの実行ファイルはメインの実行ファイルにも含まれる必要があります。

# プロジェクトビューで ``Editor`` フォルダを作成します。
#  ``ExportBundle.js`` スクリプトを作成して次のコードを含めます。inside:\\
[@
@MenuItem ("Assets/Build AssetBundle From Selection - Track dependencies")
static function ExportBundle(){
        
        var str : String = EditorUtility.SaveFilePanel("バンドルを保存します...", Application.dataPath, Selection.activeObject.name, "assetbundle");
        if (str.Length != 0){
             BuildPipeline.BuildAssetBundle(Selection.activeObject, Selection.objects, str, BuildAssetBundleOptions.CompleteAssets, BuildTarget.iPhone);
        }
}
@]
# ダウンロード可能とするオブジェクトをプレハブとして設計します
# エクスポートが必要なプレハブを選択してマウス右クリック ``ExportBundle.js``\\
Attach:iPhoneAssetBundleExport.png\
\
最初の二つのステップが正しく手順どおりであると、'Build AssetBundle From Selection - Track dependencies'' コンテキストメニューは見られます。

# アセットが使用する全てを含めたい場合は選択します。
# 保存ダイアログが表示されろので、希望するアセットバンドルのファイルめいを入力します。__.assetbundle__ 拡張子が自動的に付加されます。Unity iOSのランタイムは同じバージョンのUnityエディタでビルドされたアセットバンドルのみ許可します。詳細については [[ScriptRef:BuildPipeline.BuildAssetBundle.html | BuildPipeline.BuildAssetBundle]] を参照下さい。

!! iOSでアセットをダウンロードする
# [[ScriptRef:WWW-assetBundle.html|WWW クラス]] の使用およびメインアセットをインスタンス化により、アセットバンドルをダウンロードおよびロード出来ます。コードでのサンプルは:\\
[@
	var download : WWW;
	
	var url = "http://somehost/somepath/someassetbundle.assetbundle";
	
	download = new WWW (url);
	
	yield download;
	
	assetBundle = download.assetBundle;

	if (assetBundle != null) {
		// 他の方法として名前によりアセットをロード出来ます
(assetBundle.Load("my asset name"))
		var go : Object = assetBundle.mainAsset;
			
		if (go != null)
			instanced = Instantiate(go);
		else
			Debug.Log("Couldnt load resource");	
	} else {
		Debug.Log("Couldnt load resource");	
	}
@]
# 必要なファイルをゲームのDataフォルダの隣にあるDocumentsフォルダに必要なファイルを保存出来ます。\\
[@
        public static string GetiPhoneDocumentsPath () { 
                // ゲームは次のパスに読み取り/書き込み権限があります: /var/mobile/Applications/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/Documents 
                // Application.dataPathの戻り値は              
                // /var/mobile/Applications/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/myappname.app/Data 
                // パスから"/Data" を除きます
                string path = Application.dataPath.Substring (0, Application.dataPath.Length - 5); 
                // アプリケーション名を除きます 
                path = path.Substring(0, path.LastIndexOf('/'));  
                return path + "/Documents"; 
        }
@]

# .NETファイルAPIを使用してダウンロードされたアセットバンドルをキャッシュして、将来ロードするときは [[ScriptRef:WWW.html|WWW クラス]] および __file:///pathtoyourapplication/Documents/savedassetbundle.assetbundle__ を使用します。コードでのキャッシュのサンプルは:\\
[@
	// コードはiPhoneでのキャッシュとして設計されていて、エディタ実行時はcachedAssetBundleパスは異なるものにする必要があります。
	// Documentsフォルダへのパス取得については上記の短いコードで確認出来ます
	private var cachedAssetBundle : String = "Documents フォルダへのパス" + "/savedassetbundle.assetbundle"; 
	var cache = new System.IO.FileStream(cachedAssetBundle, System.IO.FileMode.Create);
	cache.Write(download.bytes, 0, download.bytes.Length);
	cache.Close();
	Debug.Log("キャッシュはセーブされました: " + cachedAssetBundle);
@]
->__注意:__ Documentsフォルダからファイル読込みのテストはファイル共有を行えば出来ます。``Info.plist`` で ``UIFileSharingEnabled`` をtrue にすることでiTunesからDocumentsフォルダにアクセス出来ます。
