! ShaderLab文法: Stencil / ShaderLab syntax: Stencil

Stencil バッファの一般的な使用目的はピクセルを保存したり破棄するためのピクセル マスクとして使用することです。

Stencilバッファは一般的に、ピクセルごとに 8 ビットの整数です。この値に対して書き込みやインクリメント、デクリメント出来ます。後続のドローコールは値に対してテストして、あるピクセルがピクセル シェーダー実行前に破棄するべきか判断出来ます。

!! 文法

:Ref ''referenceValue'': 比較の対象となる値 (Compが ''always'' 以外の場合) および / またはバッファに書き込まれる値 (もし Pass, Fail または ZFail のいずれかに replace がセットされた場合) 。さらに ''referenceValue''  が[] 括弧で囲まれた場合、シェーダー プロパティから値を取ることが出来ます: Ref [_StencilReference] 。0-255 の間のinteger型。
:ReadMask ''readMask'': 8 ビットマスクを 0-255 の間のinteger型、参照値をバッファのコンテンツと比較するときに使用 (''referenceValue'' および ''readMask'') ''comparisonFunction'' (''stencilBufferValue'' および ''readMask''). デフォルト: ''255''。
:WriteMask ''writeMask'': 8 ビットマスクを 0-255 の間のinteger型、バッファへの書き込みするときに使用。デフォルト: ''255''。
:Comp ''comparisonFunction'': 参照値をバッファの現在のコンテンツと比較するときに使用。デフォルト: ''always''。
:Pass ''stencilOperation'': もし stencil (およびデプス) テストを通過した場合にバッファのコンテンツをどうするか。デフォルト: ''keep''.
:Fail ''stencilOperation'': もし stencil テストを通過しなかった場合にバッファのコンテンツをどうするか。デフォルト: ''keep''.
:ZFail ''stencilOperation'': もし stencil テストを通過したが、デプステストを通過しなかった場合にバッファのコンテンツをどうするか。デフォルト: ''keep''.

Comp, Pass, Fail および ZFail は面が正面向きのは物体に適用されます。但し''Cull Front'' の場合は適用されず面が背面向きの物体です。明示的に両面の stencil のステートを指定するには CompFront, PassFront, FailFront, ZFailFront, CompBack, PassBack, FailBack, ZFailBack を定義します。

!!! 比較関数

比較関数は次のいずれかがあります:
||__Greater__ ||参照値がバッファの値より大きいピクセルのみレンダリングする。||
||__GEqual__ ||参照値がバッファの値と等しい、または、より大きいピクセルのみレンダリングする。||
||__Less__ ||参照値がバッファの値より小さいピクセルのみレンダリングする。 ||
||__LEqual__ ||参照値がバッファの値と等しい、または、より小さいピクセルのみレンダリングする。 ||
||__Equal__ ||参照値がバッファの値と等しいピクセルのみレンダリングする。 ||
||__NotEqual__ ||参照値がバッファの値と等しくないピクセルのみレンダリングする。 ||
||__Always__ ||stencil テストを常に通過させる。||
||__Never__ ||stencil テストを常に通過させない。||

!!!Stencil オペレーション
Stencil オペレーションは次のいずれかがあります:
||__Keep__ ||バッファの現在のコンテンツを保持する。 ||
||__Zero__ ||バッファに 0 を書き込まれるする。||
||__Replace__ ||バッファに参照値を書き込む。 ||
||__IncrSat__ ||バッファの現在の値をインクリメントする。もし値がすでに 255 の場合は 255 のまま維持する。||
||__DecrSat__ ||バッファの現在の値をデクリメントする。もし値がすでに 0 の場合は 0 のまま維持する。||
||__Invert__ ||全てのビットを無効にする。 ||
||__IncrWrap__ ||バッファの現在の値をインクリメントする。もし値がすでに 255 の場合は 0 に変更する。||
||__DecrWrap__ ||バッファの現在の値をデクリメントする。もし値がすでに 255 の場合は 0 に変更する。||

!! Deferred rendering パス
Deferred rendering パスでレンダリングされたオブジェクトの Stencil 機能は少し制限されていて、例えばベース パスやライティング パスの間、Stencil バッファは他の目的で使用される。この二つのステージにある間はシェーダーで定義された stencil ステートは無視されて、最終パスでのみ考慮されます。このため、これらのオブジェクトを stencil テストにもとづいてマスクで除外することは不可能ですが、バッファのコンテンツを修正して、後続のフレームでレンダリングされたオブジェクトにより使用出来ます。Deferred パスに続いて Forward rendering パスでレンダリングされたオブジェクト (例えば、透明なオブジェクトやサーフェイス シェーダーなしのオブジェクト) は自身の stencil ステートを再び通常通りにセットします。

Deferred rendering パスは stencil バッファの3つの最も高いビット使用する。シーンの中でいくつのライトマスク レイヤーが使用されているかによって、それに加えて4つの最も高いビットを使用するかが決まる。 "クリーン" なビットの範囲内でオペレーションするために、stencil 読み込みおよび書き込みマスクを使用することが可能であり、また Camera.clearStencilAfterLightingPass をライティング パスの後に使用することでカメラに強制的に stencil バッファをクリーンさせることが出来ます。

!! サンプル
最初のサンプルのシェーダーでは、デプス テストが通過するとき 2 の値を常に書き込みます (Stencil テストは常に通過するようにセットされます) 。そして、もしデプス テストが通過しなければ現在の値を 255 にデクリメント (および折返し) します (クリアされた stencil バッファでスタートしている前提) 。

[@Shader "Red" {
	SubShader {
		Tags { "RenderType"="Opaque" "Queue"="Geometry"}
		Pass {
			Stencil {
				Ref 2
				Comp always
				Pass replace
				ZFail decrWrap
			}
		
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			struct appdata {
				float4 vertex : POSITION;
			};
			struct v2f {
				float4 pos : SV_POSITION;
			};
			v2f vert(appdata v) {
				v2f o;
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				return o;
			}
			half4 frag(v2f i) : COLOR {
				return half4(1,0,0,1);
			}
			ENDCG
		}
	} 
}
@]

二つ目のシェーダーは最初 (赤) のシェーダーのみ通過した分のみが通過します。これは値が 2 と等しいかをチェックするためです。さらに stencil テストを通過すると常にバッファの値をデクリメントします。

[@Shader "Green" {
	SubShader {
		Tags { "RenderType"="Opaque" "Queue"="Geometry+1"}
		Pass {
			Stencil {
				Ref 2
				Comp equal
				Pass keep 
				Fail decrWrap 
				ZFail keep
			}
		
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			struct appdata {
				float4 vertex : POSITION;
			};
			struct v2f {
				float4 pos : SV_POSITION;
			};
			v2f vert(appdata v) {
				v2f o;
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				return o;
			}
			half4 frag(v2f i) : COLOR {
				return half4(0,1,0,1);
			}
			ENDCG
		}
	} 
}
@]

3 つめのシェーダーは stencil の値が2
 回デクリメントされた場合のみ通過します。これは最初 (赤) のシェーダーでデプス テストを通過しなかったピクセルおよび 二回目 (緑) のstencil テストでも stencil テストを通過しなかったピクセルです。

[@Shader "Blue" {
	SubShader {
		Tags { "RenderType"="Opaque" "Queue"="Geometry+2"}
		Pass {
			Stencil {
				Ref 254
				Comp equal
			}
		
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			struct appdata {
				float4 vertex : POSITION;
			};
			struct v2f {
				float4 pos : SV_POSITION;
			};
			v2f vert(appdata v) {
				v2f o;
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				return o;
			}
			half4 frag(v2f i) : COLOR {
				return half4(0,0,1,1);
			}
			ENDCG
		}
	}
}
@]

実行結果:
Attach:StencilExample.png


もう一つのサンプルはより直接的な効果があります。球は最初にこのシェーダーでレンダリングすることで、 stencil バッファでの正しい領域をマークアップします:

[@Shader "HolePrepare" {
	SubShader {
		Tags { "RenderType"="Opaque" "Queue"="Geometry+1"}
		ColorMask 0
		ZWrite off
		Stencil {
			Ref 1
			Comp always
			Pass replace
		}

		CGINCLUDE
			struct appdata {
				float4 vertex : POSITION;
			};
			struct v2f {
				float4 pos : SV_POSITION;
			};
			v2f vert(appdata v) {
				v2f o;
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				return o;
			}
			half4 frag(v2f i) : COLOR {
				return half4(1,1,0,1);
			}
		ENDCG

		Pass {
			Cull Front
			ZTest Less
		
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			ENDCG
		}
		Pass {
			Cull Back
			ZTest Greater
		
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			ENDCG
		}
	} 
}
@]

さらにもう一回比較的標準的なサーフェイス シェーダーでレンダリングすることで、フロント フェース カリングを例外として、デプス テストが無効化されて、stencil テストが事前にマークされたピクセルを破棄します:

[@Shader "Hole" {
	Properties {
		_Color ("Main Color", Color) = (1,1,1,0)
	}
	SubShader {
		Tags { "RenderType"="Opaque" "Queue"="Geometry+2"}

		ColorMask RGB
		Cull Front
		ZTest Always
		Stencil {
			Ref 1
			Comp notequal 
		}

		CGPROGRAM
		#pragma surface surf Lambert
		float4 _Color;
		struct Input {
			float4 color : COLOR;
		};
		void surf (Input IN, inout SurfaceOutput o) {
			o.Albedo = _Color.rgb;
			o.Normal = half3(0,0,-1);
			o.Alpha = 1;
		}
		ENDCG
	} 
}
@]

実行結果:
Attach:StencilExample2.png