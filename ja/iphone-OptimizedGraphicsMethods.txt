! モバイル最適化のための実用ガイド - グラフィックス手法 / Practical Guide to Optimization for Mobiles - Graphics Methods

モバイル デバイスはどこまでが実現出来るのか。実現レベルに合わせどやってゲームのプランニングをすれば良いのか。もしゲームの実行速度が遅くてプロファイラーでレンダリングのパフォーマンスがネックだと判明した場合、何を変更すれば良いのかと、ゲームの見映えを落とさずに速くする方法をどうやって知れば良いのか。このページでは一般的かつ技術的でない手法に特化してカバーします。詳細については [[Main.iphone-PracticalRenderingOptimizations | レンダリング 最適化]] を参照して下さい。

(:table width=100%:)
(:cellnr:)
(:div style="float:right; padding:5px; color:#BBBBBB; font-size:10px; width:302px;":)
Attach:iphonegames2.jpg
(:divend:)

!! コンシューマ向けモバイルで十分に期待出来ることは:

* static ライトマップ の物体。しかし注意が必要な点としては:
** アルファテストのシェーダを大量に使用すること
** バンプマップの使用、特にビルトイン シェーダを使用したもの
** 高いポリゴン数

* アニメーションつきキャラクター、洒落たシェーダつきでも問題ない。ただし注意が必要な点としては:
** 大量の観衆やハイポリゴン キャラクター

* スプライトつき2D ゲーム。ただし注意する点としては:
** オーバードロー、または、たくさんの重なり合ったレイヤー

* パーティクル エフェクト。ただし注意する点としては:
** 高密度で大規模なパーティクル（たくさんの重なり合ったパーティクル。これは一種のオーバードローです。）
** 馬鹿げた数のパーティクル、またはパーティクル コライダ。

* 物理計算。ただし注意する点としては:
** メッシュ  コライダ
** たくさんのアクティブなRigidbody

(:cellnr:)
(:div style="float:right; padding:5px; color:#BBBBBB; font-size:10px; width:302px;":)
Attach:imgEffects.jpg
(:divend:)
!! コンシューマ向けモバイルで十分に「期待出来ない」ことは:

* フルスクリーン でのイメージエフェクト、例えばグローおよびデプス オブ フィールド。

* 動的なピクセルライティング（Important とマーキングされてライトマップに焼き込みされてない複数のライト）
** 全ての影響受けるオブジェクトは使用される動的ライト毎に追加で描画され、すぐに遅くなります。

* 全てにつけられたリアルタイムシャドウ
** Unity 4 はモバイル プラットフォームでリアルタイムシャドウをサポートしますが、使用は熟慮が必要でハイエンド デバイスに限定される可能性が高いです。

(:cellnr:)
(:div style="float:right; padding:5px; color:#BBBBBB; font-size:10px; width:302px;":)
Attach:ShadowGunExample.jpg
(:divend:)

!! サンプル - 最高クラスのゲームはどう作成されているのか

!!![[ http://www.youtube.com/watch?v=YhA0cbu1BxI | Shadowgun ]]

Shadowgun は現在のモバイル ハードウェアで何が出来るのかの関心させられる事例ですりより具体的には、何が出来ないことかを明確にして制限を回避する方法の見本です。ゲームのごく一部が、 [[ http://blogs.unity3d.com/2012/03/23/shadowgun-optimizing-for-mobile-sample-level/ | ブログ投稿で]] __公に提供されています。__ 

パフォーマンスを高く維持するために、Shadowgun で行われている基本的な対応内容の一覧は次のとおりです:

* 動的ライティング - ほとんど使用されていない。
** Blob シャドウおよび Lightmaps は一切のリアルシャドウの代わりに使用されています。
** ライトプローブがリアルライトの代わりにキャラクターに使用されています。
*** マズル フラッシュはライトプローブデータにスクリプト経由で追加されています。
** 唯一の動的ピクセルライティングはキャラクターのBRDF を計算するための任意のライト方向です。

* バンプマップ - ほぼ使用されていません。
** リアル バンプマップはキャラクターのみに使用されています。
** コントラストおよびディテールは出来るかぎり拡散テクスチャ マップに焼き込みされています。
** 良い事例が右側に見られる像のテクスチャ、または輝く壁です。これらをレンダリングするためにバンプマップは使われておらず反射は偽装してテクスチャに焼き込みことでます。ライトマッピングは頂点ライティング ベースの反射ハイライトと組み合わせられてこれらのモデルに輝きの見映えを生み出してます。
** もしこのようなテクスチャの作成方法を知りたい場合は [[Main.iphone-PracticalRenderingOptimizations | レンダリング最適化ページ]] を参照して下さい。

* 高密度のパーティクル - 回避。
** 高密度のパーティクルエフェクトの代わりにUV スクロール テクスチャ。

* フォグ エフェクト - 回避。
** 神からの光線は手動モデリングされています。
** フェードイン、フェードアウトする平面を使用して実際にフォグのレンダリングすることなくシネマ風のフォグ エフェクトが得られています。
*** 平面の数が少なく間が空いているためこの方が速く、全てのピクセルおよびシェーダで計算する必要性がないことを意味しています。

* グロー - 回避。
** ブレンドされたスプライト平面を使用して特定のオブジェクトでグローの見映えが再現されています。


(:cellnr:)
(:div style="float:right; padding:5px; color:#BBBBBB; font-size:10px; width:302px;":)
Attach:skycastle.jpg
(:divend:)
!!![[ http://video.unity3d.com/video/4991636/sky-castle-demo| Sky Castle デモ ]]

このデモはハイエンドのAndroidデバイスでUnityが出来ることを確認することを確認する目的で作られてます。

* 動的ライティング - 未使用。ら
** ライトマップのみ。

* バンプマップ - 使用。
** レンガは全てバンプマップつきで、指向性ライトによりライティングされています。ここで "ハイエンドデバイス" が活躍します。

* リアルタイム反射 - 限定的。
** 隔離された別々の場所に慎重にリアルタイム反射を配置し、同時にひとつのみが実行されるようにして、2回レンダリングすべき環境を簡単にカリング出来るようにしています。

(:cellnr:)
!! 結論 - 自身のゲームにとって何を意味するか

モバイル デバイスの制限を尊重して理解するほど、ゲームの見映えは良くなり、スムーズに動作します。モバイル向けにハイクラスのゲームを作成したい場合、Unityのグラフィックス パイプラインを理解し、自身のシェーダを書くことが出来ることが役立ちます。しかし、すぐに使用出来るものを使いたい場合、ShadowGunのシェーダが [[ http://blogs.unity3d.com/2012/03/23/shadowgun-optimizing-for-mobile-sample-level/ | ここ]] でが利用可能で、良いスタート地点です。

!!! シミュレーションせず、焼き込みせよDon't Simulate It, Bake It !

ゲームご自然の法則に従うことは疑いがありません、放物線状の発射物の動きおよびクロムのひとつひとつのピクセルの輝きは最初に現実世界の場面を模倣することで計算式が導かれています。しかしゲームはある面で科学的なシミュレーションで、ある面でお絵描きです。モバイル マーケットで正確な物理計算でレンダリングするのでは競争出来ません。ハードウェアが単純にそこまで行っていないので、もし現実世界をどこまでも模倣するとゲームは制限つきで冴えない、遅いものになります。

ポリゴンやブレンド モードを見直してペイントブラシとして扱う必要があります。

[ http://www.youtube.com/watch?v=YhA0cbu1BxI | Shadowgun ]] で見られる [[Main.iphone-PracticalRenderingOptimizations | 焼き込みされたバンプマップ]] ではこの素晴らしい事例です。テクスチャには既に反射ハイライトが含まれています - 人の目では反射光とビュー方向が一致してないことに気付きません - 単にテクスチャについたコントラストのディテールで、偽装のものですが、それでも素晴らしい結果になっています。これは良くあるチートのテクニックでいくつもの成功したゲームで使用されてきました。
[[http://en.wikipedia.org/wiki/File:First_official_halo_screenshot.jpg | 初代のリリースされたHaloのスクリーンショット]] のバイザー [[http://halo.wikia.com/wiki/File:MJOLNIR_Armor.jpg | このリリースにおけるスクリーンショット]] のバイザーと比較してみて 下さい。アーマーの突起がバイザーに反射しているように見えますが、実際にはバイザーのテクスチャに焼き込みされています。League of Legends では [[http://www.youtube.com/watch?v=TQSLPO8LEhY&t=0m34s | 魔法のエフェクト]] はピクセルライトがついているように見えますが実際には焼き込みされた平面で、地面に照らされたピクセルライトのスクリーンショットをとったものと思われます。

!!!良く機能するもの:

* ライトマッピングされたstaticな物体
** ドラマチックなライティングと大規模な動的ライティング環境はミックスしません。どちらか片方を選びます。

* 動くオブジェクトでライトプローブLightprobes for moving objects
** 現在のモバイル ハードウェアは多くの動的ライト向けに作られておらず、シャドウは対応していません。ライトプローブはstaticライティングつきで複雑なゲーム世界を実現する優れたソリューションです。

* 特別なシェーダおよび、ディテールがあり、高コントラストのテクスチャ
** ShadowGunのシェーダはピクセル毎の計算を最小化し、複雑で高品質なテクスチャを利用します。 [[Main.iphone-PracticalRenderingOptimizations | レンダリング最適化]] ページを参照して、シンプルなシェーダでもテクスチャが素晴らしく見えるための方法を確認して下さい。

* カートゥーン （漫画風）グラフィックス
** 写真のようなゲームでないといけないことはありません。もしライティングおよび環境をエンジンではなくてテクスチャ アーティストの責任とすると、レンダリングの最適化につえち悩むことさえありません。

!!!あまり機能しないもの:

* グロー および その他のポストプロセッシング エフェクト
** ブレンドした四角形を使用してそのようなエフェクトを出来るかぎり近似して下さい。この事例としては Shadowgun プロジェクトを確認して下さい。

* バンプマッピング、特にビルトイン シェーダ
** 大事に使用し、もっとも重要なキャラクターまたはオブジェクトのみとします。スクーン全体を占有することが出来るものはバンプマップすべきではありません。
** バンプマップを使用する代わりに、ディテールおよびコントラストを拡散テクスチャに焼き込みます。League of Legends におけるエフェクトは業界において正しく活用されている興味深い事例です。

(:tableend:)

!!! それでは具体的には ''どうすれば'' 良いのか

詳細については [[Main.iphone-PracticalRenderingOptimizations | レンダリング最適化]] を参照して下さい。

(:tocportion:)

