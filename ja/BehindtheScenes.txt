! 内部処理

Unityはアセットを自動的にインポートして、様々な種類の追加データを管理します。以下でこの処理がどのように行われるか説明します。
テクスチャのようなアセットをAssetsフォルダに置くとき、Unityは最初に新しいファイルがあることを検知します（エディタは頻繁にAssetsフォルダのコンテンツが、既知のアセットの一覧と比較してチェックします）。一意のIDの値がアセットに割り当てられ、内部的にアクセスできるようになると、それはインポートされ処理される。Projectパネルで実際にみえるアセットは処理の結果であり、そのデータはのコンテンツは通常、元のアセットと異なります。例えば、テクスチャはAssetsフォルダでPNGファイルとして表示されますが、実際にはインポートして処理された後は内部フォーマットに変換されます。

アセットに対して内部フォーマットを使用することでUnityは ''メタデータ'' と呼ばれる追加のデータを保持して、それによりアセットデータがより柔軟にハンドリングできるようになります。例えば、Photoshopファイル形式は作業するには便利ですが、ゲームエンジンのミップマップをサポートすることは期待しません。Unityの内部フォーマットでは、一方で、このような追加機能をどのようなアセットの種類にも足すことが出来ます。全てのアセットのメタデータは $$Library$$ フォルダに格納されます。ユーザとして、Libraryフォルダを手動で変更する必要は一切なく、試みるとプロジェクトを壊す可能性があります。

Unityはプロジェクトビューによって、フォルダを作成して、アセットを整理できて、それらのフォルダは実際のファイルシステムでミラーリングされます。しかし、__必ず__ ファイルはUnityの中のProject Viewでドラッグ＆ドロップする必要があります。ファイルシステムやデスクトップを使ってファイルを移動しようとすると、Unityは変更を誤って解釈します（古いアセットが削除されて、新しいアセットがそこに出来たように表示されます）。これにより、プロジェクトにおけるアセットやスクリプトの間のリンクの情報は失われます。

プロジェクトをバックアップするとき、__常に__ メインのUnityプロジェクトのフォルダ、すなわち$$Assets$$ および $$Library$$ の両方、をバックアップすべきです。サブフォルダに含まれる全ての情報はUnityの動作にとって重要です。
