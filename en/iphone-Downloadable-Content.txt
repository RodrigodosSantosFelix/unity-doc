! Preparing your application for "In App Purchases"

This chapter does __not__ aim to cover how to integrate your game with Apple's "StoreKit" API. It is assumed that you already have integration with "StoreKit" via a [[Main.Plugins|native code plugin]].

The Apple "StoreKit" documentation defines four kinds of __Products__ that could be sold via the "In App Purchase" process: 
* Content
* Functionality
* Services
* Subscriptions

This chapter covers the first case only and focuses mainly on the downloadable content concept. [[ScriptRef:AssetBundle.html | AssetBundles]] are recommended for use as downloadable content, and two scenarios will be covered:
* How to export asset bundles for use on iOS
* How download and cache them on iOS

Note that AssetBundles are a Pro-only feature.  Users of the (basic) iOS Add-On will not be able to use Asset Bundles in their game code.

!! Exporting your assets for use on iOS
Having separate projects for downloadable content can be a good idea, allowing better separation between content that comes with your main application and content that is downloaded later.

Please note: Any game scripts included in downloadable content must also be present in the main executable.  (Recall that on iOS all game script is ahead-of-time compiled into Arm assembly and included in the XCode project.)

# Create an ``Editor`` folder inside the Project View.
# Create an ``ExportBundle.js`` script there and place the following code inside:\\
[@
@MenuItem ("Assets/Build AssetBundle From Selection - Track dependencies")
static function ExportBundle(){
        
        var str : String = EditorUtility.SaveFilePanel("Save Bundle...", Application.dataPath, Selection.activeObject.name, "assetbundle");
        if (str.Length != 0){
             BuildPipeline.BuildAssetBundle(Selection.activeObject, Selection.objects, str, BuildAssetBundleOptions.CompleteAssets, BuildTarget.iPhone);
        }
}
@]
# Design your objects that need to be downloadable as prefabs
# Select a prefab that needs to be exported and mouse right click\\
Attach:iPhoneAssetBundleExport.png\\
If the first two steps were done properly, then the ''Build AssetBundle From Selection - Track dependencies'' context menu item should be visible.
# Select it if you want to include everything that this asset uses.
# A save dialog will be shown, enter the desired asset bundle file name. An __.assetbundle__ extension will be added automatically. The Unity iOS runtime accepts only asset bundles built with the same version of the Unity editor as the final application. Read [[ScriptRef:BuildPipeline.BuildAssetBundle.html | BuildPipeline.BuildAssetBundle]] for details.

!! Downloading your assets on iOS

__Note:__ Apple may change the folder locations where you are permitted to write data.  Always check Apple documentation to be sure your application will be compliant.  The following was correct advice in early 2013.

# Asset bundles can be downloaded and loaded by using the [[ScriptRef:WWW-assetBundle.html|WWW class]] and instantiating a main asset. The recommended way to download the asset bundle is to use the  [[ScriptRef:WWW.LoadFromCacheOrDownload.html|LoadFromCacheOrDownload]] method. The following code sample shows how to do this:\\
[@
	var download : WWW;
	
	var url = "http://somehost/somepath/someassetbundle.assetbundle";
	
	download = WWW.LoadFromCacheOrDownload (url, 0);
	
	yield download;
	
	assetBundle = download.assetBundle;

	if (assetBundle != null) {
		// Alternatively you can also load an asset by name (assetBundle.Load("my asset name"))
		var go : Object = assetBundle.mainAsset;
			
		if (go != null)
			instanced = Instantiate(go);
		else
			Debug.Log("Couldn't load resource");	
	} else {
		Debug.Log("Couldn't load resource");	
	}
@]\\
The downloaded asset bundle files are stored in the @@Library@@ folder of the iOS application sandbox and have the ''No Backup'' flag set  on them. This means OS won't delete these files accidentally and these files won't be backed up to iCloud. It is good idea to keep [[ScriptRef:Caching-maximumAvailableDiskSpace.html|cache size limit]] low, to prevent your app from grabbing all the device disk space.

# If you need finer grain control on cached files you can use regular WWW download via [@ new WWW(url) @] and then store the downloaded file on disk by using .NET file API. You can save required files to a [[ScriptRef:Application-temporaryCachePath.html|Application.temporaryCachePath]] (Library/Caches, cleaned by OS) folder or [[ScriptRef:Application-persistentDataPath.html|Application.persistentDataPath]] (Documents, not cleaned by OS) folder. You should not forget to set ''No Backup'' flag on these files via [[ScriptRef:iPhone.SetNoBackupFlag.html|iPhone.SetNoBackupFlag]], to prevent them being backed up to iCloud. 


->__Note:__ Not setting this flag may result in app rejection when submitted to the App Store. Reuse these files in the future by loading it via [[ScriptRef:WWW.html|WWW class]] and @@file:///pathtoyourapplication/Library/savedassetbundle.assetbundle@@. This method of caching AssetBundles is not recommended and we encourage you to use [[ScriptRef:WWW.LoadFromCacheOrDownload.html|LoadFromCacheOrDownload]] to store your bundles.\\
\\
Sample code for caching:\\
[@
	// Code designed for caching on iPhone, cachedAssetBundle path must be different when running in Editor
	// See code snippet above for getting the path to your Library/Caches folder
	private var cachedAssetBundle : String = Application.temporaryCachePath + "/savedassetbundle.assetbundle"; 
	var cache = new System.IO.FileStream(cachedAssetBundle, System.IO.FileMode.Create);
	cache.Write(download.bytes, 0, download.bytes.Length);
	cache.Close();
        iPhone.SetNoBackupFlag(cachedAssetBundle);
	Debug.Log("Cache saved: " + cachedAssetBundle);
@]
->__Note:__ You can test reading files from the Documents folder if you enable file sharing.  Setting @@UIFileSharingEnabled@@ to true in your @@Info.plist@@ allows you to access the Documents folder from iTunes.  Note that the contents of Documents is cached to iCloud, so is not a location to store asset bundles in a shipping title.  See [[http://developer.apple.com/library/ios/documentation/FileManagement/Conceptual/FileSystemProgrammingGUide/FileSystemOverview/FileSystemOverview.html | File System Basics]] in the Apple iOS documentation.
